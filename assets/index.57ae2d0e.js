var e=Object.assign;import{R as t,W as s,O as r,V as i,a,P as h,h as n,t as o,w as d,b as m,c as u,G as l,S as c,C as p,B as f,d as g,e as y,f as b,D as v,I as S,L as w,g as x,i as N,j as _,k as C,T as M,l as G,m as z,n as P,o as k,A as I,p as R,H as L,q as E,r as T,s as B,u as j,v as O,F as A,M as U,x as F,y as $,z as D,E as H,J as W,K as V,N as q,U as K,Q as X,X as Y,Y as Z,Z as J,_ as Q,$ as ee,a0 as te,a1 as se,a2 as re,a3 as ie,a4 as ae,a5 as he,a6 as ne,a7 as oe,a8 as de,a9 as me,aa as ue,ab as le,ac as ce,ad as pe,ae as fe,af as ge,ag as ye,ah as be,ai as ve,aj as Se,ak as we,al as xe,am as Ne,an as _e,ao as Ce,ap as Me,aq as Ge,ar as ze,as as Pe,at as ke,au as Ie,av as Re,aw as Le}from"./vendor.829c92dc.js";function Ee(){const e={canvas:null,antialias:!0,alpha:!1,autoClear:!0,orbit_ctrl:!1,mouse_move:!1,mouse_raycast:!1,mouse_over:!1,click:!1,resize:!0,width:0,height:0},n={width:1,height:1,wWidth:1,wHeight:1,ratio:1},o=[];let d=[],m=[];const u=new i,l=new a,c=new h(new a(0,0,1),0),p=new t,f=[],g={conf:e,renderer:null,camera:null,cameraCtrl:null,materials:{},scene:null,size:n,mouse:u,mouseV3:l,init:function(t){t&&Object.entries(t).forEach((([t,s])=>{e[t]=s}));if(!g.scene)return void console.error("Missing Scene");if(!g.camera)return void console.error("Missing Camera");g.renderer=new s({canvas:e.canvas,antialias:e.antialias,alpha:e.alpha}),g.renderer.autoClear=e.autoClear,e.orbit_ctrl&&(g.orbitCtrl=new r(g.camera,g.renderer.domElement),e.orbit_ctrl instanceof Object&&Object.entries(e.orbit_ctrl).forEach((([e,t])=>{g.orbitCtrl[e]=t})));e.resize?(x(),window.addEventListener("resize",x)):N(300|e.width,150|e.height);e.mouse_move=e.mouse_move||e.mouse_over,e.mouse_move&&("body"===e.mouse_move?g.mouse_move_element=document.body:g.mouse_move_element=g.renderer.domElement,g.mouse_move_element.addEventListener("mousemove",v),g.mouse_move_element.addEventListener("mouseleave",S));e.click&&g.renderer.domElement.addEventListener("click",b);return o.forEach((e=>e())),!0},dispose:function(){m=[],window.removeEventListener("resize",x),g.mouse_move_element&&(g.mouse_move_element.removeEventListener("mousemove",v),g.mouse_move_element.removeEventListener("mouseleave",S));g.renderer.domElement.removeEventListener("click",b),g.orbitCtrl&&g.orbitCtrl.dispose();this.renderer.dispose()},render:function(){g.orbitCtrl&&g.orbitCtrl.update();m.forEach((e=>e())),g.renderer.render(g.scene,g.camera)},renderC:function(){g.orbitCtrl&&g.orbitCtrl.update();m.forEach((e=>e())),g.composer.render()},setSize:N,onAfterInit:function(e){o.push(e)},onAfterResize:function(e){d.push(e)},offAfterResize:function(e){d=d.filter((t=>t!==e))},onBeforeRender:function(e){m.push(e)},offBeforeRender:function(e){m=m.filter((t=>t!==e))},addIntersectObject:function(e){-1===f.indexOf(e)&&f.push(e)},removeIntersectObject:function(e){const t=f.indexOf(e);-1!==t&&f.splice(t,1)}};function y(e){const t=e.target.getBoundingClientRect();u.x=(e.clientX-t.left)/n.width*2-1,u.y=-(e.clientY-t.top)/n.height*2+1}function b(e){y(e),p.setFromCamera(u,g.camera);const t=p.intersectObjects(f);for(let s=0;s<t.length;s++){const r=t[s].object;r.onClick&&r.onClick(e)}}function v(e){y(e),w()}function S(e){w()}function w(t){if((e.mouse_over||e.mouse_raycast)&&(p.setFromCamera(u,g.camera),e.mouse_raycast&&(g.camera.getWorldDirection(c.normal),c.normal.normalize(),p.ray.intersectPlane(c,l)),e.mouse_over)){const e=p.intersectObjects(f),t=[...f];for(let s=0;s<e.length;s++){const r=e[s].object;!r.hover&&r.onHover&&(r.hover=!0,r.onHover(!0)),t.splice(t.indexOf(r),1)}for(let s=0;s<t.length;s++){const e=t[s];e.hover&&e.onHover&&(e.hover=!1,e.onHover(!1))}}}function x(){if("window"===e.resize)N(window.innerWidth,window.innerHeight);else{const e=g.renderer.domElement.parentNode;N(e.clientWidth,e.clientHeight)}d.forEach((e=>e()))}function N(e,t){if(n.width=e,n.height=t,n.ratio=e/t,g.renderer.setSize(e,t,!1),g.camera.aspect=n.ratio,g.camera.updateProjectionMatrix(),g.composer&&g.composer.setSize(e,t),"OrthographicCamera"===g.camera.type)n.wWidth=g.camera.right-g.camera.left,n.wHeight=g.camera.top-g.camera.bottom;else{const e=function(){const e=g.camera.fov*Math.PI/180,t=2*Math.tan(e/2)*Math.abs(g.camera.position.z);return[t*g.camera.aspect,t]}();n.wWidth=e[0],n.wHeight=e[1]}}return g}!function(e=".",t="__import__"){try{self[t]=new Function("u","return import(u)")}catch(s){const r=new URL(e,location),i=e=>{URL.revokeObjectURL(e.src),e.remove()};self[t]=e=>new Promise(((s,a)=>{const h=new URL(e,r);if(self[t].moduleMap[h])return s(self[t].moduleMap[h]);const n=new Blob([`import * as m from '${h}';`,`${t}.moduleMap['${h}']=m;`],{type:"text/javascript"}),o=Object.assign(document.createElement("script"),{type:"module",src:URL.createObjectURL(n),onerror(){a(new Error(`Failed to import: ${e}`)),i(o)},onload(){s(self[t].moduleMap[h]),i(o)}});document.head.appendChild(o)})),self[t].moduleMap={}}}("/trust/assets/");var Te={name:"Renderer",props:{antialias:Boolean,alpha:Boolean,autoClear:{type:Boolean,default:!0},mouseMove:{type:[Boolean,String],default:!1},mouseRaycast:{type:Boolean,default:!1},mouseOver:{type:Boolean,default:!1},click:{type:Boolean,default:!1},orbitCtrl:{type:[Boolean,Object],default:!1},resize:{type:[Boolean,String],default:!1},shadow:Boolean,width:String,height:String},setup:()=>({three:Ee(),raf:!0,onMountedCallbacks:[]}),provide(){return{three:this.three,rendererComponent:this}},mounted(){const e={canvas:this.$el,antialias:this.antialias,alpha:this.alpha,autoClear:this.autoClear,orbit_ctrl:this.orbitCtrl,mouse_move:this.mouseMove,mouse_raycast:this.mouseRaycast,mouse_over:this.mouseOver,click:this.click,resize:this.resize,width:this.width,height:this.height};this.three.init(e)&&(this.renderer=this.three.renderer,this.renderer.shadowMap.enabled=this.shadow,this.three.composer?this.animateC():this.animate()),this.onMountedCallbacks.forEach((e=>e()))},beforeUnmount(){this.raf=!1,this.three.dispose()},methods:{onMounted(e){this.onMountedCallbacks.push(e)},onBeforeRender(e){this.three.onBeforeRender(e)},onAfterResize(e){this.three.onAfterResize(e)},animate(){this.raf&&requestAnimationFrame(this.animate),this.three.render()},animateC(){this.raf&&requestAnimationFrame(this.animateC),this.three.renderC()}},render(){return n("canvas",{},this.$slots.default())},__hmrId:"Renderer"};function Be(e,t){t instanceof Object&&Object.entries(t).forEach((([t,s])=>{e[t]=s}))}function je(e,t,s,r){r||(r=t);const i=o(e,t);i.value instanceof Object?(Be(s[r],i.value),d(i,(e=>{Be(s[r],e)}),{deep:!0})):(i.value&&(s[r]=e[t]),d(i,(e=>{s[r]=e})))}function Oe(e,t){const s={};return Object.entries(e).forEach((([e,r])=>{(!t||t&&!t.includes(e))&&(s[e]=r)})),s}function Ae(e,t,s){return e+(t-e)*(s=(s=s<0?0:s)>1?1:s)}function Ue(e,t,s){e.x=Ae(e.x,t.x,s),e.y=Ae(e.y,t.y,s)}function Fe(e,t=1024){return`https://rawcdn.githack.com/emmelleppi/matcaps/9b36ccaaf0a24881a39062d05566c9e92be4aa0d/${t}/${`${e}${function(e){switch(e){case 64:return"-64px";case 128:return"-128px";case 256:return"-256px";case 512:return"-512px";default:return""}}(t)}.png`}`}var $e={name:"OrthographicCamera",inject:["three"],props:{left:{type:Number,default:-1},right:{type:Number,default:1},top:{type:Number,default:1},bottom:{type:Number,default:-1},near:{type:Number,default:.1},far:{type:Number,default:2e3},zoom:{type:Number,default:1},position:{type:Object,default:{x:0,y:0,z:0}}},created(){this.camera=new m(this.left,this.right,this.top,this.bottom,this.near,this.far),je(this,"position",this.camera),["left","right","top","bottom","near","far","zoom"].forEach((e=>{d((()=>this[e]),(()=>{this.camera[e]=this[e],this.camera.updateProjectionMatrix()}))})),this.three.camera=this.camera},render:()=>[],__hmrId:"OrthographicCamera"},De={name:"PerspectiveCamera",inject:["three"],props:{aspect:{type:Number,default:1},far:{type:Number,default:2e3},fov:{type:Number,default:50},near:{type:Number,default:.1},position:{type:Object,default:{x:0,y:0,z:0}},lookAt:{type:Object,default:null}},created(){this.camera=new u(this.fov,this.aspect,this.near,this.far),je(this,"position",this.camera),this.lookAt&&this.camera.lookAt(this.lookAt.x,this.lookAt.y,this.lookAt.z),d((()=>this.lookAt),(e=>{this.camera.lookAt(e.x,e.y,e.z)}),{deep:!0}),["aspect","far","fov","near"].forEach((e=>{d((()=>this[e]),(()=>{this.camera[e]=this[e],this.camera.updateProjectionMatrix()}))})),this.three.camera=this.camera},render:()=>[],__hmrId:"PerspectiveCamera"},He={name:"Object3D",inject:["three","scene","rendererComponent"],props:{position:{type:Object,default:{x:0,y:0,z:0}},rotation:{type:Object,default:{x:0,y:0,z:0}},scale:{type:Object,default:{x:1,y:1,z:1}},lookAt:{type:Object,default:null}},unmounted(){this._parent&&this._parent.remove(this.o3d)},methods:{initObject3D(e){this.o3d=e,je(this,"position",this.o3d),je(this,"rotation",this.o3d),je(this,"scale",this.o3d),this.lookAt&&this.o3d.lookAt(this.lookAt.x,this.lookAt.y,this.lookAt.z),d((()=>this.lookAt),(e=>{this.o3d.lookAt(e.x,e.y,e.z)}),{deep:!0});let t=this.$parent;for(;t;){if(t.add){t.add(this.o3d),this._parent=t;break}t=t.$parent}this._parent||console.error("Missing parent (Scene, Group...)")},add(e){this.o3d.add(e)},remove(e){this.o3d.remove(e)}},render(){return this.$slots.default?this.$slots.default():[]},__hmrId:"Object3D"},We={name:"Group",extends:He,created(){this.group=new l,this.initObject3D(this.group)},__hmrId:"Group"},Ve={name:"Scene",inject:["three"],props:{id:String,background:[String,Number]},setup(e){const t=new c;return e.background&&(t.background=new p(e.background)),d((()=>e.background),(e=>{t.background=new p(e)})),{scene:t}},provide(){return{scene:this.scene}},mounted(){this.three.scene||(this.three.scene=this.scene)},methods:{add(e){this.scene.add(e)},remove(e){this.scene.remove(e)}},render(){return this.$slots.default?this.$slots.default():[]},__hmrId:"Scene"},qe={inject:["mesh"],props:{rotateX:Number,rotateY:Number,rotateZ:Number},created(){this.mesh||console.error("Missing parent Mesh"),this.watchProps=[],Object.entries(this.$props).forEach((e=>this.watchProps.push(e[0]))),this.createGeometry(),this.rotateGeometry(),this.mesh.setGeometry(this.geometry),this.addWatchers()},unmounted(){this.geometry.dispose()},methods:{addWatchers(){this.watchProps.forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},rotateGeometry(){this.rotateX&&this.geometry.rotateX(this.rotateX),this.rotateY&&this.geometry.rotateY(this.rotateY),this.rotateZ&&this.geometry.rotateZ(this.rotateZ)},refreshGeometry(){const e=this.geometry;this.createGeometry(),this.rotateGeometry(),this.mesh.setGeometry(this.geometry),e.dispose()}},render:()=>[]},Ke={extends:qe,props:{size:Number,width:{type:Number,default:1},height:{type:Number,default:1},depth:{type:Number,default:1},widthSegments:{type:Number,default:1},heightSegments:{type:Number,default:1},depthSegments:{type:Number,default:1}},methods:{createGeometry(){let e=this.width,t=this.height,s=this.depth;this.size&&(e=this.size,t=this.size,s=this.size),this.geometry=new f(e,t,s,this.widthSegments,this.heightSegments,this.depthSegments)}}},Xe={extends:qe,props:{radius:{type:Number,default:1},segments:{type:Number,default:8},thetaStart:{type:Number,default:0},thetaLength:{type:Number,default:2*Math.PI}},methods:{createGeometry(){this.geometry=new g(this.radius,this.segments,this.thetaStart,this.thetaLength)}}},Ye={extends:qe,props:{radius:{type:Number,default:1},height:{type:Number,default:1},radialSegments:{type:Number,default:8},heightSegments:{type:Number,default:1},openEnded:{type:Boolean,default:!1},thetaStart:{type:Number,default:0},thetaLength:{type:Number,default:2*Math.PI}},methods:{createGeometry(){this.geometry=new y(this.radius,this.height,this.radialSegments,this.heightSegments,this.openEnded,this.thetaStart,this.thetaLength)}}},Ze={extends:qe,props:{radiusTop:{type:Number,default:1},radiusBottom:{type:Number,default:1},height:{type:Number,default:1},radialSegments:{type:Number,default:8},heightSegments:{type:Number,default:1},openEnded:{type:Boolean,default:!1},thetaStart:{type:Number,default:0},thetaLength:{type:Number,default:2*Math.PI}},methods:{createGeometry(){this.geometry=new b(this.radiusTop,this.radiusBottom,this.height,this.radialSegments,this.heightSegments,this.openEnded,this.thetaStart,this.thetaLength)}}},Je={extends:qe,props:{radius:{type:Number,default:1},detail:{type:Number,default:0}},methods:{createGeometry(){this.geometry=new v(this.radius,this.detail)}}},Qe={extends:qe,props:{radius:{type:Number,default:1},detail:{type:Number,default:0}},methods:{createGeometry(){this.geometry=new S(this.radius,this.detail)}}},et={extends:qe,props:{points:Array,segments:{type:Number,default:12},phiStart:{type:Number,default:0},phiLength:{type:Number,default:2*Math.PI}},methods:{createGeometry(){this.geometry=new w(this.points,this.segments,this.phiStart,this.phiLength)}}},tt={extends:qe,props:{radius:{type:Number,default:1},detail:{type:Number,default:0}},methods:{createGeometry(){this.geometry=new x(this.radius,this.detail)}}},st={extends:qe,props:{vertices:Array,indices:Array,radius:{type:Number,default:1},detail:{type:Number,default:0}},methods:{createGeometry(){this.geometry=new N(this.vertices,this.indices,this.radius,this.detail)}}},rt={extends:qe,props:{innerRadius:{type:Number,default:.5},outerRadius:{type:Number,default:1},thetaSegments:{type:Number,default:8},phiSegments:{type:Number,default:1},thetaStart:{type:Number,default:0},thetaLength:{type:Number,default:2*Math.PI}},methods:{createGeometry(){this.geometry=new _(this.innerRadius,this.outerRadius,this.thetaSegments,this.phiSegments,this.thetaStart,this.thetaLength)}}},it={extends:qe,props:{radius:{type:Number,default:1},widthSegments:{type:Number,default:12},heightSegments:{type:Number,default:12}},methods:{createGeometry(){this.geometry=new C(this.radius,this.widthSegments,this.heightSegments)}}},at={extends:qe,props:{radius:{type:Number,default:1},detail:{type:Number,default:0}},methods:{createGeometry(){this.geometry=new M(this.radius,this.detail)}}},ht={extends:qe,props:{radius:{type:Number,default:1},tube:{type:Number,default:.4},radialSegments:{type:Number,default:8},tubularSegments:{type:Number,default:6},arc:{type:Number,default:2*Math.PI}},methods:{createGeometry(){this.geometry=new G(this.radius,this.tube,this.radialSegments,this.tubularSegments,this.arc)}}},nt={extends:qe,props:{radius:{type:Number,default:1},tube:{type:Number,default:.4},tubularSegments:{type:Number,default:64},radialSegments:{type:Number,default:8},p:{type:Number,default:2},q:{type:Number,default:3}},methods:{createGeometry(){this.geometry=new z(this.radius,this.tube,this.tubularSegments,this.radialSegments,this.p,this.q)}}},ot={extends:qe,props:{path:P,tubularSegments:{type:Number,default:64},radius:{type:Number,default:1},radiusSegments:{type:Number,default:8},closed:{type:Boolean,default:!1}},methods:{createGeometry(){this.geometry=new k(this.path,this.tubularSegments,this.radius,this.radiusSegments,this.closed)}}},dt={extends:He,name:"Light",props:{color:{type:String,default:"#ffffff"},intensity:{type:Number,default:1},castShadow:{type:Boolean,default:!1},shadowMapSize:{type:Object,default:{x:512,y:512}}},unmounted(){this.light.target&&this.$parent.remove(this.light.target)},methods:{initLight(){this.light.target&&je(this,"target",this.light.target,"position"),this.light.shadow&&(this.light.castShadow=this.castShadow,Be(this.light.shadow.mapSize,this.shadowMapSize)),["color","intensity","castShadow"].forEach((e=>{d((()=>this[e]),(()=>{"color"===e?this.light.color=new p(this.color):this.light[e]=this[e]}))})),this.initObject3D(this.light),this.light.target&&this.$parent.add(this.light.target)}},__hmrId:"Light"},mt={extends:dt,created(){this.light=new I(this.color,this.intensity),this.initLight()},__hmrId:"AmbientLight"},ut={extends:dt,props:{target:Object},created(){this.light=new R(this.color,this.intensity),this.initLight()},__hmrId:"DirectionalLight"},lt={extends:dt,props:{groundColor:{type:String,default:"#ffffff"}},created(){this.light=new L(this.color,this.groundColor,this.intensity),je(this,"groundColor",this.light),this.initLight()},__hmrId:"HemisphereLight"},ct={extends:dt,props:{distance:{type:Number,default:0},decay:{type:Number,default:1}},created(){this.light=new E(this.color,this.intensity,this.distance,this.decay),this.initLight()},__hmrId:"PointLight"},pt={extends:dt,props:{width:{type:Number,default:10},height:{type:Number,default:10},helper:Boolean},created(){T.init(),this.light=new B(this.color,this.intensity,this.width,this.height),["width","height"].forEach((e=>{d((()=>this[e]),(()=>{this.light[e]=this[e]}))})),this.helper&&(this.lightHelper=new j(this.light),this.$parent.add(this.lightHelper)),this.initLight()},unmounted(){this.lightHelper&&this.$parent.remove(this.lightHelper)},__hmrId:"RectAreaLight"},ft={extends:dt,props:{angle:{type:Number,default:Math.PI/3},decay:{type:Number,default:1},distance:{type:Number,default:0},penumbra:{type:Number,default:0},target:Object},created(){this.light=new O(this.color,this.intensity,this.distance,this.angle,this.penumbra,this.decay),["angle","decay","distance","penumbra"].forEach((e=>{d((()=>this[e]),(()=>{this.light[e]=this[e]}))})),this.initLight()},__hmrId:"SpotLight"},gt={inject:["three","mesh"],props:{color:{type:[String,Number],default:"#ffffff"},depthTest:{type:Boolean,default:!0},depthWrite:{type:Boolean,default:!0},flatShading:Boolean,fog:{type:Boolean,default:!0},opacity:{type:Number,default:1},side:{type:Number,default:A},transparent:Boolean,vertexColors:Boolean},provide(){return{material:this}},created(){this.createMaterial(),this.mesh.setMaterial(this.material),this._addWatchers(),this.addWatchers&&this.addWatchers()},unmounted(){this.material.dispose()},methods:{setProp(e,t,s=!1){this.material[e]=t,this.material.needsUpdate=s},setTexture(e,t="map"){this.setProp(t,e,!0)},_addWatchers(){["color","depthTest","depthWrite","fog","opacity","side","transparent"].forEach((e=>{d((()=>this[e]),(()=>{"color"===e?this.material.color.set(this.color):this.material[e]=this[e]}))}))}},render(){return this.$slots.default?this.$slots.default():[]},__hmrId:"Material"},yt={extends:gt,methods:{createMaterial(){this.material=new U(Oe(this.$props))}},__hmrId:"BasicMaterial"},bt={extends:gt,methods:{createMaterial(){this.material=new F(Oe(this.$props))}},__hmrId:"LambertMaterial"},vt={extends:gt,props:{src:String,name:String},methods:{createMaterial(){const e=this.name?Fe(this.name):this.src,t=Oe(this.$props,["src","name"]);t.matcap=(new $).load(e),this.material=new D(t)}},__hmrId:"MatcapMaterial"},St={extends:gt,props:{emissive:{type:[Number,String],default:0},emissiveIntensity:{type:Number,default:1},reflectivity:{type:Number,default:1},shininess:{type:Number,default:30},specular:{type:[String,Number],default:1118481}},methods:{createMaterial(){this.material=new H(Oe(this.$props))},addWatchers(){["emissive","emissiveIntensity","reflectivity","shininess","specular"].forEach((e=>{d((()=>this[e]),(t=>{"emissive"===e||"specular"===e?this.material[e].set(t):this.material[e]=t}))}))}},__hmrId:"PhongMaterial"};const wt={aoMapIntensity:{type:Number,default:1},bumpScale:{type:Number,default:1},displacementBias:{type:Number,default:0},displacementScale:{type:Number,default:1},emissive:{type:[Number,String],default:0},emissiveIntensity:{type:Number,default:1},envMapIntensity:{type:Number,default:1},lightMapIntensity:{type:Number,default:1},metalness:{type:Number,default:0},normalScale:{type:Object,default:{x:1,y:1}},roughness:{type:Number,default:1},refractionRatio:{type:Number,default:.98},wireframe:Boolean};var xt={extends:gt,props:wt,methods:{createMaterial(){this.material=new W(Oe(this.$props,["normalScale"]))},addWatchers(){Object.keys(wt).forEach((e=>{"normalScale"!==e&&d((()=>this[e]),(t=>{"emissive"===e?this.material[e].set(t):this.material[e]=t}))})),je(this,"normalScale",this.material)}},__hmrId:"StandardMaterial"},Nt={extends:xt,methods:{createMaterial(){this.material=new V(Oe(this.$props))}},__hmrId:"PhysicalMaterial"};const _t=q.meshphong_frag.slice(0,q.meshphong_frag.indexOf("void main() {")),Ct=q.meshphong_frag.slice(q.meshphong_frag.indexOf("void main() {")),Mt={uniforms:K.merge([X.phong.uniforms,{thicknessColor:{value:new p(6718871)},thicknessDistortion:{value:.1},thicknessAmbient:{value:0},thicknessAttenuation:{value:.1},thicknessPower:{value:2},thicknessScale:{value:10}}]),vertexShader:`\n    #define USE_UV\n    ${q.meshphong_vert}\n  `,fragmentShader:`\n    #define USE_UV\n    #define SUBSURFACE\n\n    ${_t}\n\n    uniform float thicknessPower;\n    uniform float thicknessScale;\n    uniform float thicknessDistortion;\n    uniform float thicknessAmbient;\n    uniform float thicknessAttenuation;\n    uniform vec3 thicknessColor;\n\n    void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {\n      #ifdef USE_COLOR\n        vec3 thickness = vColor * thicknessColor;\n      #else\n        vec3 thickness = thicknessColor;\n      #endif\n      vec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));\n      float scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;\n      vec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;\n      reflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;\n    }\n  `+Ct.replace("#include <lights_fragment_begin>",(Gt=q.lights_fragment_begin,zt="RE_Direct( directLight, geometry, material, reflectedLight );",Pt="\n        RE_Direct( directLight, geometry, material, reflectedLight );\n        #if defined( SUBSURFACE ) && defined( USE_UV )\n          RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);\n        #endif\n      ",Gt.split(zt).join(Pt)))};var Gt,zt,Pt,kt={extends:{inject:["three","mesh"],props:{uniforms:Object,vertexShader:String,fragmentShader:String},created(){this.createMaterial(),this.mesh.setMaterial(this.material),this.addWatchers&&this.addWatchers()},unmounted(){this.material.dispose()},render:()=>[],__hmrId:"ShaderMaterial"},props:{color:{type:String,default:"#ffffff"},thicknessColor:{type:String,default:"#ffffff"},thicknessDistortion:{type:Number,default:.4},thicknessAmbient:{type:Number,default:.01},thicknessAttenuation:{type:Number,default:.7},thicknessPower:{type:Number,default:2},thicknessScale:{type:Number,default:4},transparent:{type:Boolean,default:!1},opacity:{type:Number,default:1},vertexColors:{type:Boolean,default:!1}},methods:{createMaterial(){const t=Mt,s=K.clone(t.uniforms);Object.entries(this.$props).forEach((([e,t])=>{let r=e,i=t;["color","thicknessColor"].includes(e)&&("color"===e&&(r="diffuse"),i=new p(t)),["transparent","vertexColors"].includes(e)||(s[r].value=i)})),this.material=new Y(e(e({},t),{uniforms:s,lights:!0,transparent:this.transparent,vertexColors:this.vertexColors}))}},__hmrId:"SubSurfaceMaterial"},It={extends:gt,methods:{createMaterial(){this.material=new Z(Oe(this.$props))}},__hmrId:"ToonMaterial"},Rt={inject:["material"],emits:["loaded"],props:{id:{type:String,default:"map"},src:String,onLoad:Function,onProgress:Function,onError:Function,mapping:{type:Number,default:J},wrapS:{type:Number,default:Q},wrapT:{type:Number,default:Q},magFilter:{type:Number,default:ee},minFilter:{type:Number,default:te},repeat:{type:Object,default:{x:1,y:1}},rotation:{type:Number,default:0},center:{type:Object,default:{x:0,y:0}}},created(){this.refreshTexture(),d((()=>this.src),this.refreshTexture)},unmounted(){this.material.setTexture(null,this.id),this.texture.dispose()},methods:{createTexture(){this.texture=(new $).load(this.src,this.onLoaded,this.onProgress,this.onError);["mapping","wrapS","wrapT","magFilter","minFilter","repeat","rotation","rotation","center"].forEach((e=>{je(this,e,this.texture)}))},refreshTexture(){this.createTexture(),this.material.setTexture(this.texture,this.id)},onLoaded(){this.onLoad&&this.onLoad(),this.$emit("loaded")}},render:()=>[]},Lt={inject:["material"],emits:["loaded"],props:{path:String,urls:{type:Array,default:["px.jpg","nx.jpg","py.jpg","ny.jpg","pz.jpg","nz.jpg"]},onLoad:Function,onProgress:Function,onError:Function,id:{type:String,default:"envMap"},refraction:Boolean,refractionRatio:{type:Number,default:.98}},created(){this.refreshTexture(),d((()=>this.path),this.refreshTexture),d((()=>this.urls),this.refreshTexture)},unmounted(){this.material.setTexture(null,this.id),this.texture.dispose()},methods:{createTexture(){this.texture=(new se).setPath(this.path).load(this.urls,this.onLoaded,this.onProgress,this.onError)},refreshTexture(){this.createTexture(),this.material.setTexture(this.texture,this.id),this.refraction&&(this.texture.mapping=re,this.material.setProp("refractionRatio",this.refractionRatio))},onLoaded(){this.onLoad&&this.onLoad(),this.$emit("loaded")}},render:()=>[]},Et={extends:He,name:"Mesh",props:{castShadow:Boolean,receiveShadow:Boolean,onHover:Function,onClick:Function},provide(){return{mesh:this}},mounted(){this.mesh||this.loading||this.initMesh()},methods:{initMesh(){this.mesh=new ie(this.geometry,this.material),["castShadow","receiveShadow"].forEach((e=>{this.mesh[e]=this[e],d((()=>this[e]),(()=>{this.mesh[e]=this[e]}))})),this.onHover&&(this.mesh.onHover=e=>{this.onHover({component:this,over:e})},this.three.addIntersectObject(this.mesh)),this.onClick&&(this.mesh.onClick=e=>{this.onClick({component:this,event:e})},this.three.addIntersectObject(this.mesh)),this.initObject3D(this.mesh)},setGeometry(e){this.geometry=e,this.mesh&&(this.mesh.geometry=e)},setMaterial(e){this.material=e,this.mesh&&(this.mesh.material=e)},refreshGeometry(){const e=this.geometry;this.createGeometry(),this.mesh.geometry=this.geometry,e.dispose()}},unmounted(){this.mesh&&this.three.removeIntersectObject(this.mesh),this.geometry&&this.geometry.dispose(),this.material&&this.material.dispose()},__hmrId:"Mesh"},Tt={extends:Et,props:{size:Number,width:{type:Number,default:1},height:{type:Number,default:1},depth:{type:Number,default:1},widthSegments:{type:Number,default:1},heightSegments:{type:Number,default:1},depthSegments:{type:Number,default:1}},created(){this.createGeometry(),["size","width","height","depth","widthSegments","heightSegments","depthSegments"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.size?this.geometry=new f(this.size,this.size,this.size):this.geometry=new f(this.width,this.height,this.depth)}},__hmrId:"Box"},Bt={extends:Et,props:{radius:{type:Number,default:1},segments:{type:Number,default:8},thetaStart:{type:Number,default:0},thetaLength:{type:Number,default:2*Math.PI}},created(){this.createGeometry();["radius","segments","thetaStart","thetaLength"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new g(this.radius,this.segments,this.thetaStart,this.thetaLength)}},__hmrId:"Circle"},jt={extends:Et,props:{radius:{type:Number,default:1},height:{type:Number,default:1},radialSegments:{type:Number,default:8},heightSegments:{type:Number,default:1},openEnded:{type:Boolean,default:!1},thetaStart:{type:Number,default:0},thetaLength:{type:Number,default:2*Math.PI}},created(){this.createGeometry();["radius","height","radialSegments","heightSegments","openEnded","thetaStart","thetaLength"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new y(this.radius,this.height,this.radialSegments,this.heightSegments,this.openEnded,this.thetaStart,this.thetaLength)}},__hmrId:"Cone"},Ot={extends:Et,props:{radiusTop:{type:Number,default:1},radiusBottom:{type:Number,default:1},height:{type:Number,default:1},radialSegments:{type:Number,default:8},heightSegments:{type:Number,default:1},openEnded:{type:Boolean,default:!1},thetaStart:{type:Number,default:0},thetaLength:{type:Number,default:2*Math.PI}},created(){this.createGeometry();["radiusTop","radiusBottom","height","radialSegments","heightSegments","openEnded","thetaStart","thetaLength"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new b(this.radiusTop,this.radiusBottom,this.height,this.radialSegments,this.heightSegments,this.openEnded,this.thetaStart,this.thetaLength)}},__hmrId:"Cylinder"},At={extends:Et,props:{radius:{type:Number,default:1},detail:{type:Number,default:0}},created(){this.createGeometry();["radius","detail"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new v(this.radius,this.detail)}},__hmrId:"Dodecahedron"},Ut={extends:Et,props:{radius:{type:Number,default:1},detail:{type:Number,default:0}},created(){this.createGeometry();["radius","detail"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new S(this.radius,this.detail)}},__hmrId:"Icosahedron"},Ft={extends:Et,props:{points:Array,segments:{type:Number,default:12},phiStart:{type:Number,default:0},phiLength:{type:Number,default:2*Math.PI}},created(){this.createGeometry();["points","segments","phiStart","phiLength"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new w(this.points,this.segments,this.phiStart,this.phiLength)}},__hmrId:"Lathe"},$t={extends:Et,props:{radius:{type:Number,default:1},detail:{type:Number,default:0}},created(){this.createGeometry();["radius","detail"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new x(this.radius,this.detail)}},__hmrId:"Octahedron"},Dt={extends:Et,props:{width:{type:Number,default:1},height:{type:Number,default:1},widthSegments:{type:Number,default:1},heightSegments:{type:Number,default:1}},created(){this.createGeometry();["width","height","widthSegments","heightSegments"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new ae(this.width,this.height,this.widthSegments,this.heightSegments)}},__hmrId:"Plane"},Ht={extends:Et,props:{vertices:Array,indices:Array,radius:{type:Number,default:1},detail:{type:Number,default:0}},created(){this.createGeometry();["vertices","indices","radius","detail"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new N(this.vertices,this.indices,this.radius,this.detail)}},__hmrId:"Polyhedron"},Wt={extends:Et,props:{innerRadius:{type:Number,default:.5},outerRadius:{type:Number,default:1},thetaSegments:{type:Number,default:8},phiSegments:{type:Number,default:1},thetaStart:{type:Number,default:0},thetaLength:{type:Number,default:2*Math.PI}},created(){this.createGeometry();["innerRadius","outerRadius","thetaSegments","phiSegments","thetaStart","thetaLength"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new _(this.innerRadius,this.outerRadius,this.thetaSegments,this.phiSegments,this.thetaStart,this.thetaLength)}},__hmrId:"Ring"},Vt={extends:Et,props:{radius:Number,widthSegments:{type:Number,default:12},heightSegments:{type:Number,default:12}},watch:{radius(){this.refreshGeometry()},widthSegments(){this.refreshGeometry()},heightSegments(){this.refreshGeometry()}},created(){this.createGeometry()},methods:{createGeometry(){this.geometry=new C(this.radius,this.widthSegments,this.heightSegments)}},__hmrId:"Sphere"},qt={extends:Et,props:{radius:{type:Number,default:1},detail:{type:Number,default:0}},created(){this.createGeometry();["radius","detail"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new M(this.radius,this.detail)}},__hmrId:"Tetrahedron"},Kt={text:String,fontSrc:String,size:{type:Number,default:80},height:{type:Number,default:5},depth:{type:Number,default:1},curveSegments:{type:Number,default:12},bevelEnabled:{type:Boolean,default:!1},bevelThickness:{type:Number,default:10},bevelSize:{type:Number,default:8},bevelOffset:{type:Number,default:0},bevelSegments:{type:Number,default:5},align:{type:[Boolean,String],default:!1}},Xt={extends:Et,props:e({},Kt),data:()=>({loading:!0}),created(){["text","size","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","align"].forEach((e=>{d((()=>this[e]),(()=>{this.font&&this.refreshGeometry()}))}));(new he).load(this.fontSrc,(e=>{this.loading=!1,this.font=e,this.createGeometry(),this.initMesh()}))},methods:{createGeometry(){this.geometry=new ne(this.text,{font:this.font,size:this.size,height:this.height,depth:this.depth,curveSegments:this.curveSegments,bevelEnabled:this.bevelEnabled,bevelThickness:this.bevelThickness,bevelSize:this.bevelSize,bevelOffset:this.bevelOffset,bevelSegments:this.bevelSegments}),"center"===this.align&&this.geometry.center()}}},Yt={extends:Et,props:{radius:{type:Number,default:.5},tube:{type:Number,default:.4},radialSegments:{type:Number,default:8},tubularSegments:{type:Number,default:6},arc:{type:Number,default:2*Math.PI}},created(){this.createGeometry();["radius","tube","radialSegments","tubularSegments","arc"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new G(this.radius,this.tube,this.radialSegments,this.tubularSegments,this.arc)}},__hmrId:"Torus"},Zt={extends:Et,props:{radius:{type:Number,default:.5},tube:{type:Number,default:.4},tubularSegments:{type:Number,default:64},radialSegments:{type:Number,default:8},p:{type:Number,default:2},q:{type:Number,default:3}},created(){this.createGeometry();["radius","tube","radialSegments","tubularSegments","p","q"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new z(this.radius,this.tube,this.tubularSegments,this.radialSegments,this.p,this.q)}},__hmrId:"TorusKnot"},Jt={extends:Et,props:{path:P,points:Array,tubularSegments:{type:Number,default:64},radius:{type:Number,default:1},radialSegments:{type:Number,default:8},closed:{type:Boolean,default:!1}},created(){this.createGeometry();["tubularSegments","radius","radialSegments","closed"].forEach((e=>{d((()=>this[e]),(e=>{this.refreshGeometry()}))})),d((()=>this.points),(()=>{Qt(this.geometry,this.points)}))},methods:{createGeometry(){let e;this.points?e=new oe(this.points):this.path?e=this.path:console.error("Missing path curve or points."),this.geometry=new k(e,this.tubularSegments,this.radius,this.radialSegments,this.closed)},updateCurve(e){Qt(this.geometry,e)}},__hmrId:"Tube"};function Qt(e,t){const s=new oe(t),{radialSegments:r,radius:i,tubularSegments:h,closed:n}=e.parameters,o=s.computeFrenetFrames(h,n);e.tangents=o.tangents,e.normals=o.normals,e.binormals=o.binormals,e.parameters.path=s;const d=e.attributes.position.array,m=e.attributes.normal.array,u=new a;let l;for(let a=0;a<h;a++)c(a);function c(e){l=s.getPointAt(e/h,l);const t=o.normals[e],a=o.binormals[e];for(let s=0;s<=r;s++){const h=s/r*Math.PI*2,n=Math.sin(h),o=-Math.cos(h);u.x=o*t.x+n*a.x,u.y=o*t.y+n*a.y,u.z=o*t.z+n*a.z,u.normalize();const c=3*(e*(r+1)+s);m[c]=u.x,m[c+1]=u.y,m[c+2]=u.z,d[c]=l.x+i*u.x,d[c+1]=l.y+i*u.y,d[c+2]=l.z+i*u.z}}c(h),e.attributes.position.needsUpdate=!0,e.attributes.normal.needsUpdate=!0}var es={extends:Et,props:{cubeRTSize:{type:Number,default:256},cubeCameraNear:{type:Number,default:.1},cubeCameraFar:{type:Number,default:2e3},autoUpdate:Boolean},mounted(){this.initGem(),this.autoUpdate?this.three.onBeforeRender(this.updateCubeRT):this.rendererComponent.onMounted(this.updateCubeRT)},unmounted(){this.three.offBeforeRender(this.updateCubeRT),this.meshBack&&this.$parent.remove(this.meshBack),this.materialBack&&this.materialBack.dispose()},methods:{initGem(){const e=new de(this.cubeRTSize,{format:me,generateMipmaps:!0,minFilter:te});this.cubeCamera=new ue(this.cubeCameraNear,this.cubeCameraFar,e),je(this,"position",this.cubeCamera),this.$parent.add(this.cubeCamera),this.material.side=A,this.material.envMap=e.texture,this.material.envMapIntensity=10,this.material.metalness=0,this.material.roughness=0,this.material.opacity=.75,this.material.transparent=!0,this.material.premultipliedAlpha=!0,this.material.needsUpdate=!0,this.materialBack=this.material.clone(),this.materialBack.side=le,this.materialBack.envMapIntensity=5,this.materialBack.metalness=1,this.materialBack.roughness=0,this.materialBack.opacity=.5,this.meshBack=new ie(this.geometry,this.materialBack),je(this,"position",this.meshBack),je(this,"rotation",this.meshBack),je(this,"scale",this.meshBack),this.$parent.add(this.meshBack)},updateCubeRT(){this.mesh.visible=!1,this.meshBack.visible=!1,this.cubeCamera.update(this.three.renderer,this.scene),this.mesh.visible=!0,this.meshBack.visible=!0}},__hmrId:"Gem"},ts={emits:["loaded"],extends:Et,props:{src:String,width:Number,height:Number,keepSize:Boolean},created(){this.createGeometry(),this.createMaterial(),this.initMesh(),d((()=>this.src),this.refreshTexture),["width","height"].forEach((e=>{d((()=>this[e]),this.resize)})),this.keepSize&&this.three.onAfterResize(this.resize)},methods:{createGeometry(){this.geometry=new ae(1,1,1,1)},createMaterial(){this.material=new U({side:ce,map:this.loadTexture()})},loadTexture(){return(new $).load(this.src,this.onLoaded)},refreshTexture(){this.texture&&this.texture.dispose(),this.material.map=this.loadTexture(),this.material.needsUpdate=!0},onLoaded(e){this.texture=e,this.resize(),this.$emit("loaded")},resize(){if(!this.texture)return;const e=this.three.size,t=this.texture.image.width/this.texture.image.height;let s,r;this.width&&this.height?(s=this.width*e.wWidth/e.width,r=this.height*e.wHeight/e.height):this.width?(s=this.width*e.wWidth/e.width,r=s/t):this.height&&(r=this.height*e.wHeight/e.height,s=r*t),this.mesh.scale.x=s,this.mesh.scale.y=r}},__hmrId:"Image"},ss={extends:He,props:{castShadow:Boolean,receiveShadow:Boolean,count:Number},provide(){return{mesh:this}},beforeMount(){this.$slots.default||console.error("Missing Geometry")},created(){this.initMesh()},methods:{initMesh(){this.mesh=new pe(this.geometry,this.material,this.count),["castShadow","receiveShadow"].forEach((e=>{this.mesh[e]=this[e],d((()=>this[e]),(()=>{this.mesh[e]=this[e]}))})),this.initObject3D(this.mesh)},setGeometry(e){this.geometry=e,this.mesh&&(this.mesh.geometry=e)},setMaterial(e){this.material=e,this.mesh&&(this.mesh.material=e)}},__hmrId:"InstancedMesh"},rs={extends:Et,props:{cubeRTSize:{type:Number,default:256},cubeCameraNear:{type:Number,default:.1},cubeCameraFar:{type:Number,default:2e3},autoUpdate:Boolean},mounted(){this.initMirrorMesh(),this.autoUpdate?this.three.onBeforeRender(this.updateCubeRT):this.rendererComponent.onMounted(this.updateCubeRT)},unmounted(){this.three.offBeforeRender(this.updateCubeRT),this.cubeCamera&&this.$parent.remove(this.cubeCamera)},methods:{initMirrorMesh(){const e=new de(this.cubeRTSize,{format:me,generateMipmaps:!0,minFilter:te});this.cubeCamera=new ue(this.cubeCameraNear,this.cubeCameraFar,e),this.$parent.add(this.cubeCamera),this.material.envMap=e.texture,this.material.needsUpdate=!0},updateCubeRT(){this.mesh.visible=!1,this.cubeCamera.update(this.three.renderer,this.scene),this.mesh.visible=!0}},__hmrId:"MirrorMesh"},is={extends:Et,props:{cubeRTSize:{type:Number,default:256},cubeCameraNear:{type:Number,default:.1},cubeCameraFar:{type:Number,default:2e3},refractionRatio:{type:Number,default:.98},autoUpdate:Boolean},mounted(){this.initMirrorMesh(),this.autoUpdate?this.three.onBeforeRender(this.updateCubeRT):this.rendererComponent.onMounted(this.updateCubeRT)},unmounted(){this.three.offBeforeRender(this.updateCubeRT),this.cubeCamera&&this.$parent.remove(this.cubeCamera)},methods:{initMirrorMesh(){const e=new de(this.cubeRTSize,{mapping:re,format:me,generateMipmaps:!0,minFilter:te});this.cubeCamera=new ue(this.cubeCameraNear,this.cubeCameraFar,e),je(this,"position",this.cubeCamera),this.$parent.add(this.cubeCamera),this.material.envMap=e.texture,this.material.refractionRatio=this.refractionRatio,this.material.needsUpdate=!0},updateCubeRT(){this.mesh.visible=!1,this.cubeCamera.update(this.three.renderer,this.scene),this.mesh.visible=!0}},__hmrId:"RefractionMesh"},as={extends:He,emits:["loaded"],props:{src:String},data:()=>({loading:!0}),created(){this.texture=(new $).load(this.src,this.onLoaded),this.material=new fe({map:this.texture}),this.sprite=new ge(this.material),this.geometry=this.sprite.geometry,this.initObject3D(this.sprite)},unmounted(){this.texture.dispose(),this.material.dispose()},methods:{onLoaded(){this.loading=!1,this.updateUV(),this.$emit("loaded")},updateUV(){this.iWidth=this.texture.image.width,this.iHeight=this.texture.image.height,this.iRatio=this.iWidth/this.iHeight;let e=.5,t=.5;this.iRatio>1?t=.5/this.iRatio:e=.5/this.iRatio;const s=this.geometry.attributes.position.array;s[0]=-e,s[1]=-t,s[5]=e,s[6]=-t,s[10]=e,s[11]=t,s[15]=-e,s[16]=t,this.geometry.attributes.position.needsUpdate=!0}},__hmrId:"Sprite"},hs={setup:()=>({passes:[]}),inject:["three"],provide(){return{passes:this.passes}},mounted(){this.three.onAfterInit((()=>{this.composer=new ye(this.three.renderer),this.three.renderer.autoClear=!1,this.passes.forEach((e=>{this.composer.addPass(e)})),this.three.composer=this.composer,this.resize(),this.three.onAfterResize(this.resize)}))},unmounted(){this.three.offAfterResize(this.resize)},methods:{resize(){this.composer.setSize(this.three.size.width,this.three.size.height)}},render(){return this.$slots.default()},__hmrId:"EffectComposer"},ns={inject:["three","passes"],beforeMount(){this.passes||console.error("Missing parent EffectComposer")},unmounted(){this.pass.dispose&&this.pass.dispose()},render:()=>[],__hmrId:"EffectPass"},os={extends:ns,mounted(){this.three.scene||console.error("Missing Scene"),this.three.camera||console.error("Missing Camera");const e=new be(this.three.scene,this.three.camera);this.passes.push(e),this.pass=e},__hmrId:"RenderPass"},ds={extends:ns,props:{focus:{type:Number,default:1},aperture:{type:Number,default:.025},maxblur:{type:Number,default:.01}},watch:{focus(){this.pass.uniforms.focus.value=this.focus},aperture(){this.pass.uniforms.aperture.value=this.aperture},maxblur(){this.pass.uniforms.maxblur.value=this.maxblur}},mounted(){this.three.scene||console.error("Missing Scene"),this.three.camera||console.error("Missing Camera");const e={focus:this.focus,aperture:this.aperture,maxblur:this.maxblur,width:this.three.size.width,height:this.three.size.height},t=new ve(this.three.scene,this.three.camera,e);this.passes.push(t),this.pass=t},__hmrId:"BokehPass"},ms={extends:ns,props:{noiseIntensity:{type:Number,default:.5},scanlinesIntensity:{type:Number,default:.05},scanlinesCount:{type:Number,default:4096},grayscale:{type:Number,default:0}},watch:{noiseIntensity(){this.pass.uniforms.nIntensity.value=this.noiseIntensity},scanlinesIntensity(){this.pass.uniforms.sIntensity.value=this.scanlinesIntensity},scanlinesCount(){this.pass.uniforms.sCount.value=this.scanlinesCount},grayscale(){this.pass.uniforms.grayscale.value=this.grayscale}},mounted(){const e=new Se(this.noiseIntensity,this.scanlinesIntensity,this.scanlinesCount,this.grayscale);this.passes.push(e),this.pass=e},__hmrId:"FilmPass"},us={extends:ns,mounted(){const e=new we(xe);this.passes.push(e),this.pass=e,this.three.onAfterResize(this.resize)},unmounted(){this.three.offAfterResize(this.resize)},methods:{resize(){const{resolution:e}=this.pass.material.uniforms;e.value.x=1/this.three.size.width,e.value.y=1/this.three.size.height}},__hmrId:"FXAAPass"},ls={extends:ns,props:{shape:{type:Number,default:1},radius:{type:Number,default:4},rotateR:{type:Number,default:Math.PI/12*1},rotateG:{type:Number,default:Math.PI/12*2},rotateB:{type:Number,default:Math.PI/12*3},scatter:{type:Number,default:0}},mounted(){const e=new Ne(this.three.size.width,this.three.size.height,{});["shape","radius","rotateR","rotateG","rotateB","scatter"].forEach((t=>{e.uniforms[t].value=this[t],d((()=>this[t]),(()=>{e.uniforms[t].value=this[t]}))})),this.passes.push(e),this.pass=e},__hmrId:"HalftonePass"},cs={extends:ns,mounted(){const e=new _e(this.three.size.width,this.three.size.height);this.passes.push(e),this.pass=e},__hmrId:"SMAAPass"},ps={uniforms:{},vertexShader:"\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ",fragmentShader:"\n    varying vec2 vUv;\n    void main() {\n      gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    }\n  "},fs={uniforms:{tDiffuse:{value:null},blurRadius:{value:0},gradientRadius:{value:0},start:{value:new i},end:{value:new i},delta:{value:new i},texSize:{value:new i}},vertexShader:ps.vertexShader,fragmentShader:"\n    uniform sampler2D tDiffuse;\n    uniform float blurRadius;\n    uniform float gradientRadius;\n    uniform vec2 start;\n    uniform vec2 end;\n    uniform vec2 delta;\n    uniform vec2 texSize;\n    varying vec2 vUv;\n\n    float random(vec3 scale, float seed) {\n      /* use the fragment position for a different seed per-pixel */\n      return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n    }\n\n    void main() {\n      vec4 color = vec4(0.0);\n      float total = 0.0;\n\n      /* randomize the lookup values to hide the fixed number of samples */\n      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n      vec2 normal = normalize(vec2(start.y - end.y, end.x - start.x));\n      float radius = smoothstep(0.0, 1.0, abs(dot(vUv * texSize - start, normal)) / gradientRadius) * blurRadius;\n      for (float t = -30.0; t <= 30.0; t++) {\n          float percent = (t + offset - 0.5) / 30.0;\n          float weight = 1.0 - abs(percent);\n          vec4 texel = texture2D(tDiffuse, vUv + delta / texSize * percent * radius);\n          // vec4 texel2 = texture2D(tDiffuse, vUv + vec2(-delta.y, delta.x) / texSize * percent * radius);\n\n          /* switch to pre-multiplied alpha to correctly blur transparent images */\n          texel.rgb *= texel.a;\n          // texel2.rgb *= texel2.a;\n\n          color += texel * weight;\n          total += 2.0 * weight;\n      }\n\n      gl_FragColor = color / total;\n\n      /* switch back from pre-multiplied alpha */\n      gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n    }\n  "},gs={extends:ns,props:{blurRadius:{type:Number,default:10},gradientRadius:{type:Number,default:100},start:{type:Object,default:{x:0,y:100}},end:{type:Object,default:{x:10,y:100}}},mounted(){this.pass=new we(fs),this.passes.push(this.pass),this.pass1=new we(fs),this.passes.push(this.pass1);const e=this.uniforms=this.pass.uniforms,t=this.uniforms1=this.pass1.uniforms;t.blurRadius=e.blurRadius,t.gradientRadius=e.gradientRadius,t.start=e.start,t.end=e.end,t.texSize=e.texSize,je(this,"blurRadius",e.blurRadius,"value"),je(this,"gradientRadius",e.gradientRadius,"value"),this.updateFocusLine(),["start","end"].forEach((e=>{d((()=>this[e]),this.updateFocusLine,{deep:!0})})),this.pass.setSize=(t,s)=>{e.texSize.value.set(t,s)}},methods:{updateFocusLine(){this.uniforms.start.value.copy(this.start),this.uniforms.end.value.copy(this.end);const e=(new i).copy(this.end).sub(this.start).normalize();this.uniforms.delta.value.copy(e),this.uniforms1.delta.value.set(-e.y,e.x)}},__hmrId:"TiltShiftPass"},ys={extends:ns,props:{strength:{type:Number,default:1.5},radius:{type:Number,default:0},threshold:{type:Number,default:0}},watch:{strength(){this.pass.strength=this.strength},radius(){this.pass.radius=this.radius},threshold(){this.pass.threshold=this.threshold}},mounted(){const e=new i(this.three.size.width,this.three.size.height),t=new Ce(e,this.strength,this.radius,this.threshold);this.passes.push(t),this.pass=t},__hmrId:"UnrealBloomPass"},bs={uniforms:{tDiffuse:{value:null},center:{value:new i(.5,.5)},strength:{value:0}},vertexShader:ps.vertexShader,fragmentShader:"\n    uniform sampler2D tDiffuse;\n    uniform vec2 center;\n    uniform float strength;\n    varying vec2 vUv;\n\n    float random(vec3 scale, float seed) {\n      /* use the fragment position for a different seed per-pixel */\n      return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n    }\n    \n    void main() {\n      vec4 color = vec4(0.0);\n      float total = 0.0;\n      vec2 toCenter = center - vUv;\n      \n      /* randomize the lookup values to hide the fixed number of samples */\n      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n      \n      for (float t = 0.0; t <= 40.0; t++) {\n        float percent = (t + offset) / 40.0;\n        float weight = 4.0 * (percent - percent * percent);\n        vec4 texel = texture2D(tDiffuse, vUv + toCenter * percent * strength);\n\n        /* switch to pre-multiplied alpha to correctly blur transparent images */\n        texel.rgb *= texel.a;\n\n        color += texel * weight;\n        total += weight;\n      }\n\n      gl_FragColor = color / total;\n\n      /* switch back from pre-multiplied alpha */\n      gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n    }\n  "},vs={extends:ns,props:{center:{type:Object,default:{x:.5,y:.5}},strength:{type:Number,default:.5}},mounted(){this.pass=new we(bs),this.passes.push(this.pass);const e=this.uniforms=this.pass.uniforms;je(this,"center",e.center,"value"),je(this,"strength",e.strength,"value")},__hmrId:"ZoomBlurPass"},Ss=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",Renderer:Te,OrthographicCamera:$e,PerspectiveCamera:De,Camera:De,Group:We,Scene:Ve,BoxGeometry:Ke,CircleGeometry:Xe,ConeGeometry:Ye,CylinderGeometry:Ze,DodecahedronGeometry:Je,IcosahedronGeometry:Qe,LatheGeometry:et,OctahedronGeometry:tt,PolyhedronGeometry:st,RingGeometry:rt,SphereGeometry:it,TetrahedronGeometry:at,TorusGeometry:ht,TorusKnotGeometry:nt,TubeGeometry:ot,AmbientLight:mt,DirectionalLight:ut,HemisphereLight:lt,PointLight:ct,RectAreaLight:pt,SpotLight:ft,BasicMaterial:yt,LambertMaterial:bt,MatcapMaterial:vt,PhongMaterial:St,PhysicalMaterial:Nt,StandardMaterial:xt,SubSurfaceMaterial:kt,ToonMaterial:It,Texture:Rt,CubeTexture:Lt,Mesh:Et,Box:Tt,Circle:Bt,Cone:jt,Cylinder:Ot,Dodecahedron:At,Icosahedron:Ut,Lathe:Ft,Octahedron:$t,Plane:Dt,Polyhedron:Ht,Ring:Wt,Sphere:Vt,Tetrahedron:qt,Text:Xt,Torus:Yt,TorusKnot:Zt,Tube:Jt,Gem:es,Image:ts,InstancedMesh:ss,MirrorMesh:rs,RefractionMesh:is,Sprite:as,EffectComposer:hs,RenderPass:os,BokehPass:ds,FilmPass:ms,FXAAPass:us,HalftonePass:ls,SMAAPass:cs,TiltShiftPass:gs,UnrealBloomPass:ys,ZoomBlurPass:vs,setFromProp:Be,bindProp:je,propsValues:Oe,lerp:Ae,lerpv2:Ue,lerpv3:function(e,t,s){e.x=Ae(e.x,t.x,s),e.y=Ae(e.y,t.y,s),e.z=Ae(e.z,t.z,s)},limit:function(e,t,s){return e<t?t:e>s?s:e},getMatcapUrl:Fe});const ws={install:e=>{["Camera","OrthographicCamera","PerspectiveCamera","Renderer","Scene","Group","BoxGeometry","CircleGeometry","ConeGeometry","CylinderGeometry","DodecahedronGeometry","IcosahedronGeometry","LatheGeometry","OctahedronGeometry","PolyhedronGeometry","RingGeometry","SphereGeometry","TetrahedronGeometry","TorusGeometry","TorusKnotGeometry","TubeGeometry","AmbientLight","DirectionalLight","HemisphereLight","PointLight","RectAreaLight","SpotLight","BasicMaterial","LambertMaterial","MatcapMaterial","PhongMaterial","PhysicalMaterial","ShaderMaterial","StandardMaterial","SubSurfaceMaterial","ToonMaterial","Texture","CubeTexture","Box","Circle","Cone","Cylinder","Dodecahedron","Icosahedron","Mesh","Lathe","Octahedron","Plane","Polyhedron","Ring","Sphere","Tetrahedron","Text","Torus","TorusKnot","Tube","Gem","Image","InstancedMesh","MirrorMesh","RefractionMesh","Sprite","BokehPass","EffectComposer","FilmPass","FXAAPass","HalftonePass","RenderPass","SAOPass","SMAAPass","TiltShiftPass","UnrealBloomPass","ZoomBlurPass","GLTFViewer"].forEach((t=>{e.component(t,Ss[t])}))}};function xs(e){let t,s,r;const a={value:null},h={value:new i(.5,.5)},n={value:0},o={value:new i(0,0)},d={value:new i(1,1)};return t=new ae(2,2,1,1),s=new Y({transparent:!0,uniforms:{map:a,center:h,strength:n,uvOffset:o,uvScale:d},vertexShader:"\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      ",fragmentShader:"\n        uniform sampler2D map;\n        uniform vec2 center;\n        uniform float strength;\n        uniform vec2 uvOffset;\n        uniform vec2 uvScale;\n        varying vec2 vUv;\n\n        float random(vec3 scale, float seed) {\n          /* use the fragment position for a different seed per-pixel */\n          return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n        }\n        \n        void main() {\n          vec2 tUv = vUv * uvScale + uvOffset;\n          if (abs(strength) > 0.001) {\n            vec4 color = vec4(0.0);\n            float total = 0.0;\n            vec2 toCenter = center * uvScale + uvOffset - tUv;\n            \n            /* randomize the lookup values to hide the fixed number of samples */\n            float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n            \n            for (float t = 0.0; t <= 20.0; t++) {\n              float percent = (t + offset) / 20.0;\n              float weight = 2.0 * (percent - percent * percent);\n              vec4 texel = texture2D(map, tUv + toCenter * percent * strength);\n\n              /* switch to pre-multiplied alpha to correctly blur transparent images */\n              texel.rgb *= texel.a;\n\n              color += texel * weight;\n              total += weight;\n            }\n\n            gl_FragColor = color / total;\n\n            /* switch back from pre-multiplied alpha */\n            gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n            gl_FragColor.a = 1.0 - abs(strength);\n          } else {\n            gl_FragColor = texture2D(map, tUv);\n          }\n        }\n      "}),r=new ie(t,s),{geometry:t,material:s,mesh:r,uCenter:h,uStrength:n,setMap:function(e){a.value=e,m()},updateUV:m};function m(){const t=e.size.ratio,s=a.value.image.width/a.value.image.height;o.value.set(0,0),d.value.set(1,1),s>t?(d.value.x=t/s,o.value.x=(1-d.value.x)/2):(d.value.y=s/t,o.value.y=(1-d.value.y)/2)}}const Ns={components:{OrthographicCamera:$e,Renderer:Te,Scene:Ve},props:{images:Array,events:{type:Object,default:()=>({wheel:!0,click:!0,keyup:!0})}},setup(){const e=new i;return{loader:function(){const e={loader:new $,count:0,textures:[],loadProgress:0,loadTextures:function(s,r){e.count=s.length,e.textures.splice(0),e.loadProgress=0,Promise.all(s.map(t)).then(r)},dispose:function(){e.textures.forEach((e=>e.dispose()))}};return e;function t(t,s){return new Promise((r=>{e.loader.load(t.src,(t=>{e.loadProgress+=1/e.count,e.textures[s]=t,r(t)}))}))}}(),center:e,progress:0,targetProgress:0}},mounted(){this.three=this.$refs.renderer.three,this.images.length<2?console.error("This slider needs at least 2 images."):this.loader.loadTextures(this.images,this.init)},unmounted(){this.loader.dispose();const e=this.three.renderer.domElement;e.removeEventListener("click",this.onClick),e.removeEventListener("wheel",this.onWheel),document.removeEventListener("keyup",this.onKeyup)},methods:{init(){this.initScene(),Me.fromTo(this.image1.uStrength,{value:-2},{value:0,duration:2.5,ease:Ge.easeOut});const e=this.three.renderer.domElement;this.events.click&&e.addEventListener("click",this.onClick),this.events.wheel&&e.addEventListener("wheel",this.onWheel),this.events.keyup&&document.addEventListener("keyup",this.onKeyup),this.three.onBeforeRender(this.animate),this.three.onAfterResize(this.onResize)},initScene(){const e=this.$refs.scene.scene;this.image1=new xs(this.three),this.image1.setMap(this.loader.textures[0]),this.image2=new xs(this.three),this.image2.setMap(this.loader.textures[1]),this.setImagesProgress(0),e.add(this.image1.mesh),e.add(this.image2.mesh)},animate(){const{mouse:e}=this.three;this.center.copy(e).divideScalar(2).addScalar(.5),Ue(this.image1.uCenter.value,this.center,.1),Ue(this.image2.uCenter.value,this.center,.1),this.updateProgress()},onResize(){this.image1.updateUV(),this.image2.updateUV()},onWheel(e){e.deltaY>0?this.setTargetProgress(this.targetProgress+.05):this.setTargetProgress(this.targetProgress-.05)},onClick(e){e.clientY<this.three.size.height/2?this.navPrevious():this.navNext()},onKeyup(e){37===e.keyCode||38===e.keyCode?this.navPrevious():39!==e.keyCode&&40!==e.keyCode||this.navNext()},navNext(){Number.isInteger(this.targetProgress)?this.setTargetProgress(this.targetProgress+1):this.setTargetProgress(Math.ceil(this.targetProgress))},navPrevious(){Number.isInteger(this.targetProgress)?this.setTargetProgress(this.targetProgress-1):this.setTargetProgress(Math.floor(this.targetProgress))},setTargetProgress(e){this.targetProgress=e,this.targetProgress<0&&(this.progress+=this.images.length,this.targetProgress+=this.images.length)},updateProgress(){const e=Ae(this.progress,this.targetProgress,.1),t=e-this.progress;if(0===t)return;const s=this.progress%1,r=e%1;if(t>0&&r<s||t<0&&s<r){const t=Math.floor(e)%this.images.length,s=(t+1)%this.images.length;this.image1.setMap(this.loader.textures[t]),this.image2.setMap(this.loader.textures[s])}this.progress=e,this.setImagesProgress(this.progress%1)},setImagesProgress(e){this.image1.uStrength.value=e,this.image2.uStrength.value=-1+e}}};Ns.render=function(e,t,s,r,i,a){const h=ze("OrthographicCamera"),n=ze("Scene"),o=ze("Renderer");return Pe(),ke(o,{ref:"renderer",antialias:"",resize:"","mouse-move":""},{default:Ie((()=>[Re(h,{ref:"camera",position:{z:10}},null,512),Re(n,{ref:"scene"},null,512)])),_:1},512)};const _s={components:{Slider:Ns},data:()=>({images:[{src:"/assets/images/img1.jpg"},{src:"/assets/images/img2.jpg"},{src:"/assets/images/img3.jpg"},{src:"/assets/images/img4.jpg"},{src:"/assets/images/img5.jpg"}]}),mounted(){},methods:{}};_s.render=function(e,t,s,r,i,a){const h=ze("Slider");return Pe(),ke(h,{images:i.images},null,8,["images"])};const Cs=Le(_s);Cs.use(ws),Cs.mount("#app");
