var e=Object.assign;import{R as t,W as s,O as r,V as i,a,P as h,h as n,t as o,w as d,b as u,c as m,G as l,S as c,C as p,B as f,d as g,e as y,f as b,D as v,I as S,L as x,g as w,i as N,j as _,k as M,T as z,l as C,m as P,n as G,o as I,A as k,p as R,H as L,q as E,r as T,s as B,u as A,v as j,F as O,M as U,x as F,y as $,z as D,E as H,J as W,K as V,N as X,U as Y,Q as Z,X as q,Y as K,Z as J,_ as Q,$ as ee,a0 as te,a1 as se,a2 as re,a3 as ie,a4 as ae,a5 as he,a6 as ne,a7 as oe,a8 as de,a9 as ue,aa as me,ab as le,ac as ce,ad as pe,ae as fe,af as ge,ag as ye,ah as be,ai as ve,aj as Se,ak as xe,al as we,am as Ne,an as _e,ao as Me,ap as ze,aq as Ce,ar as Pe,as as Ge,at as Ie,au as ke,av as Re,aw as Le,ax as Ee,ay as Te,az as Be,aA as Ae,aB as je}from"./vendor.16c62712.js";function Oe(){const e={canvas:null,antialias:!0,alpha:!1,autoClear:!0,orbit_ctrl:!1,mouse_move:!1,mouse_raycast:!1,mouse_over:!1,click:!1,resize:!0,width:0,height:0},n={width:1,height:1,wWidth:1,wHeight:1,ratio:1},o=[];let d=[],u=[];const m=new i,l=new a,c=new h(new a(0,0,1),0),p=new t,f=[],g={conf:e,renderer:null,camera:null,cameraCtrl:null,materials:{},scene:null,size:n,mouse:m,mouseV3:l,init:function(t){t&&Object.entries(t).forEach((([t,s])=>{e[t]=s}));if(!g.scene)return void console.error("Missing Scene");if(!g.camera)return void console.error("Missing Camera");g.renderer=new s({canvas:e.canvas,antialias:e.antialias,alpha:e.alpha}),g.renderer.autoClear=e.autoClear,e.orbit_ctrl&&(g.orbitCtrl=new r(g.camera,g.renderer.domElement),e.orbit_ctrl instanceof Object&&Object.entries(e.orbit_ctrl).forEach((([e,t])=>{g.orbitCtrl[e]=t})));e.resize?(w(),window.addEventListener("resize",w)):N(300|e.width,150|e.height);e.mouse_move=e.mouse_move||e.mouse_over,e.mouse_move&&("body"===e.mouse_move?g.mouse_move_element=document.body:g.mouse_move_element=g.renderer.domElement,g.mouse_move_element.addEventListener("mousemove",v),g.mouse_move_element.addEventListener("mouseleave",S));e.click&&g.renderer.domElement.addEventListener("click",b);return o.forEach((e=>e())),!0},dispose:function(){u=[],window.removeEventListener("resize",w),g.mouse_move_element&&(g.mouse_move_element.removeEventListener("mousemove",v),g.mouse_move_element.removeEventListener("mouseleave",S));g.renderer.domElement.removeEventListener("click",b),g.orbitCtrl&&g.orbitCtrl.dispose();this.renderer.dispose()},render:function(){g.orbitCtrl&&g.orbitCtrl.update();u.forEach((e=>e())),g.renderer.render(g.scene,g.camera)},renderC:function(){g.orbitCtrl&&g.orbitCtrl.update();u.forEach((e=>e())),g.composer.render()},setSize:N,onAfterInit:function(e){o.push(e)},onAfterResize:function(e){d.push(e)},offAfterResize:function(e){d=d.filter((t=>t!==e))},onBeforeRender:function(e){u.push(e)},offBeforeRender:function(e){u=u.filter((t=>t!==e))},addIntersectObject:function(e){-1===f.indexOf(e)&&f.push(e)},removeIntersectObject:function(e){const t=f.indexOf(e);-1!==t&&f.splice(t,1)}};function y(e){const t=e.target.getBoundingClientRect();m.x=(e.clientX-t.left)/n.width*2-1,m.y=-(e.clientY-t.top)/n.height*2+1}function b(e){y(e),p.setFromCamera(m,g.camera);const t=p.intersectObjects(f);for(let s=0;s<t.length;s++){const r=t[s].object;r.onClick&&r.onClick(e)}}function v(e){y(e),x()}function S(e){x()}function x(t){if((e.mouse_over||e.mouse_raycast)&&(p.setFromCamera(m,g.camera),e.mouse_raycast&&(g.camera.getWorldDirection(c.normal),c.normal.normalize(),p.ray.intersectPlane(c,l)),e.mouse_over)){const e=p.intersectObjects(f),t=[...f];for(let s=0;s<e.length;s++){const r=e[s].object;!r.hover&&r.onHover&&(r.hover=!0,r.onHover(!0)),t.splice(t.indexOf(r),1)}for(let s=0;s<t.length;s++){const e=t[s];e.hover&&e.onHover&&(e.hover=!1,e.onHover(!1))}}}function w(){if("window"===e.resize)N(window.innerWidth,window.innerHeight);else{const e=g.renderer.domElement.parentNode;N(e.clientWidth,e.clientHeight)}d.forEach((e=>e()))}function N(e,t){if(n.width=e,n.height=t,n.ratio=e/t,g.renderer.setSize(e,t,!1),g.camera.aspect=n.ratio,g.camera.updateProjectionMatrix(),g.composer&&g.composer.setSize(e,t),"OrthographicCamera"===g.camera.type)n.wWidth=g.camera.right-g.camera.left,n.wHeight=g.camera.top-g.camera.bottom;else{const e=function(){const e=g.camera.fov*Math.PI/180,t=2*Math.tan(e/2)*Math.abs(g.camera.position.z);return[t*g.camera.aspect,t]}();n.wWidth=e[0],n.wHeight=e[1]}}return g}!function(e=".",t="__import__"){try{self[t]=new Function("u","return import(u)")}catch(s){const r=new URL(e,location),i=e=>{URL.revokeObjectURL(e.src),e.remove()};self[t]=e=>new Promise(((s,a)=>{const h=new URL(e,r);if(self[t].moduleMap[h])return s(self[t].moduleMap[h]);const n=new Blob([`import * as m from '${h}';`,`${t}.moduleMap['${h}']=m;`],{type:"text/javascript"}),o=Object.assign(document.createElement("script"),{type:"module",src:URL.createObjectURL(n),onerror(){a(new Error(`Failed to import: ${e}`)),i(o)},onload(){s(self[t].moduleMap[h]),i(o)}});document.head.appendChild(o)})),self[t].moduleMap={}}}("/assets/");var Ue={name:"Renderer",props:{antialias:Boolean,alpha:Boolean,autoClear:{type:Boolean,default:!0},mouseMove:{type:[Boolean,String],default:!1},mouseRaycast:{type:Boolean,default:!1},mouseOver:{type:Boolean,default:!1},click:{type:Boolean,default:!1},orbitCtrl:{type:[Boolean,Object],default:!1},resize:{type:[Boolean,String],default:!1},shadow:Boolean,width:String,height:String},setup:()=>({three:Oe(),raf:!0,onMountedCallbacks:[]}),provide(){return{three:this.three,rendererComponent:this}},mounted(){const e={canvas:this.$el,antialias:this.antialias,alpha:this.alpha,autoClear:this.autoClear,orbit_ctrl:this.orbitCtrl,mouse_move:this.mouseMove,mouse_raycast:this.mouseRaycast,mouse_over:this.mouseOver,click:this.click,resize:this.resize,width:this.width,height:this.height};this.three.init(e)&&(this.renderer=this.three.renderer,this.renderer.shadowMap.enabled=this.shadow,this.three.composer?this.animateC():this.animate()),this.onMountedCallbacks.forEach((e=>e()))},beforeUnmount(){this.raf=!1,this.three.dispose()},methods:{onMounted(e){this.onMountedCallbacks.push(e)},onBeforeRender(e){this.three.onBeforeRender(e)},onAfterResize(e){this.three.onAfterResize(e)},animate(){this.raf&&requestAnimationFrame(this.animate),this.three.render()},animateC(){this.raf&&requestAnimationFrame(this.animateC),this.three.renderC()}},render(){return n("canvas",{},this.$slots.default())},__hmrId:"Renderer"};function Fe(e,t){t instanceof Object&&Object.entries(t).forEach((([t,s])=>{e[t]=s}))}function $e(e,t,s,r){r||(r=t);const i=o(e,t);i.value instanceof Object?(Fe(s[r],i.value),d(i,(e=>{Fe(s[r],e)}),{deep:!0})):(i.value&&(s[r]=e[t]),d(i,(e=>{s[r]=e})))}function De(e,t){const s={};return Object.entries(e).forEach((([e,r])=>{(!t||t&&!t.includes(e))&&(s[e]=r)})),s}function He(e,t,s){return e+(t-e)*(s=(s=s<0?0:s)>1?1:s)}function We(e,t=1024){return`https://rawcdn.githack.com/emmelleppi/matcaps/9b36ccaaf0a24881a39062d05566c9e92be4aa0d/${t}/${`${e}${function(e){switch(e){case 64:return"-64px";case 128:return"-128px";case 256:return"-256px";case 512:return"-512px";default:return""}}(t)}.png`}`}var Ve={name:"OrthographicCamera",inject:["three"],props:{left:{type:Number,default:-1},right:{type:Number,default:1},top:{type:Number,default:1},bottom:{type:Number,default:-1},near:{type:Number,default:.1},far:{type:Number,default:2e3},zoom:{type:Number,default:1},position:{type:Object,default:{x:0,y:0,z:0}}},created(){this.camera=new u(this.left,this.right,this.top,this.bottom,this.near,this.far),$e(this,"position",this.camera),["left","right","top","bottom","near","far","zoom"].forEach((e=>{d((()=>this[e]),(()=>{this.camera[e]=this[e],this.camera.updateProjectionMatrix()}))})),this.three.camera=this.camera},render:()=>[],__hmrId:"OrthographicCamera"},Xe={name:"PerspectiveCamera",inject:["three"],props:{aspect:{type:Number,default:1},far:{type:Number,default:2e3},fov:{type:Number,default:50},near:{type:Number,default:.1},position:{type:Object,default:{x:0,y:0,z:0}},lookAt:{type:Object,default:null}},created(){this.camera=new m(this.fov,this.aspect,this.near,this.far),$e(this,"position",this.camera),this.lookAt&&this.camera.lookAt(this.lookAt.x,this.lookAt.y,this.lookAt.z),d((()=>this.lookAt),(e=>{this.camera.lookAt(e.x,e.y,e.z)}),{deep:!0}),["aspect","far","fov","near"].forEach((e=>{d((()=>this[e]),(()=>{this.camera[e]=this[e],this.camera.updateProjectionMatrix()}))})),this.three.camera=this.camera},render:()=>[],__hmrId:"PerspectiveCamera"},Ye={name:"Object3D",inject:["three","scene","rendererComponent"],props:{position:{type:Object,default:{x:0,y:0,z:0}},rotation:{type:Object,default:{x:0,y:0,z:0}},scale:{type:Object,default:{x:1,y:1,z:1}},lookAt:{type:Object,default:null}},unmounted(){this._parent&&this._parent.remove(this.o3d)},methods:{initObject3D(e){this.o3d=e,$e(this,"position",this.o3d),$e(this,"rotation",this.o3d),$e(this,"scale",this.o3d),this.lookAt&&this.o3d.lookAt(this.lookAt.x,this.lookAt.y,this.lookAt.z),d((()=>this.lookAt),(e=>{this.o3d.lookAt(e.x,e.y,e.z)}),{deep:!0});let t=this.$parent;for(;t;){if(t.add){t.add(this.o3d),this._parent=t;break}t=t.$parent}this._parent||console.error("Missing parent (Scene, Group...)")},add(e){this.o3d.add(e)},remove(e){this.o3d.remove(e)}},render(){return this.$slots.default?this.$slots.default():[]},__hmrId:"Object3D"},Ze={name:"Group",extends:Ye,created(){this.group=new l,this.initObject3D(this.group)},__hmrId:"Group"},qe={name:"Scene",inject:["three"],props:{id:String,background:[String,Number]},setup(e){const t=new c;return e.background&&(t.background=new p(e.background)),d((()=>e.background),(e=>{t.background=new p(e)})),{scene:t}},provide(){return{scene:this.scene}},mounted(){this.three.scene||(this.three.scene=this.scene)},methods:{add(e){this.scene.add(e)},remove(e){this.scene.remove(e)}},render(){return this.$slots.default?this.$slots.default():[]},__hmrId:"Scene"},Ke={inject:["mesh"],props:{rotateX:Number,rotateY:Number,rotateZ:Number},created(){this.mesh||console.error("Missing parent Mesh"),this.watchProps=[],Object.entries(this.$props).forEach((e=>this.watchProps.push(e[0]))),this.createGeometry(),this.rotateGeometry(),this.mesh.setGeometry(this.geometry),this.addWatchers()},unmounted(){this.geometry.dispose()},methods:{addWatchers(){this.watchProps.forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},rotateGeometry(){this.rotateX&&this.geometry.rotateX(this.rotateX),this.rotateY&&this.geometry.rotateY(this.rotateY),this.rotateZ&&this.geometry.rotateZ(this.rotateZ)},refreshGeometry(){const e=this.geometry;this.createGeometry(),this.rotateGeometry(),this.mesh.setGeometry(this.geometry),e.dispose()}},render:()=>[]},Je={extends:Ke,props:{size:Number,width:{type:Number,default:1},height:{type:Number,default:1},depth:{type:Number,default:1},widthSegments:{type:Number,default:1},heightSegments:{type:Number,default:1},depthSegments:{type:Number,default:1}},methods:{createGeometry(){let e=this.width,t=this.height,s=this.depth;this.size&&(e=this.size,t=this.size,s=this.size),this.geometry=new f(e,t,s,this.widthSegments,this.heightSegments,this.depthSegments)}}},Qe={extends:Ke,props:{radius:{type:Number,default:1},segments:{type:Number,default:8},thetaStart:{type:Number,default:0},thetaLength:{type:Number,default:2*Math.PI}},methods:{createGeometry(){this.geometry=new g(this.radius,this.segments,this.thetaStart,this.thetaLength)}}},et={extends:Ke,props:{radius:{type:Number,default:1},height:{type:Number,default:1},radialSegments:{type:Number,default:8},heightSegments:{type:Number,default:1},openEnded:{type:Boolean,default:!1},thetaStart:{type:Number,default:0},thetaLength:{type:Number,default:2*Math.PI}},methods:{createGeometry(){this.geometry=new y(this.radius,this.height,this.radialSegments,this.heightSegments,this.openEnded,this.thetaStart,this.thetaLength)}}},tt={extends:Ke,props:{radiusTop:{type:Number,default:1},radiusBottom:{type:Number,default:1},height:{type:Number,default:1},radialSegments:{type:Number,default:8},heightSegments:{type:Number,default:1},openEnded:{type:Boolean,default:!1},thetaStart:{type:Number,default:0},thetaLength:{type:Number,default:2*Math.PI}},methods:{createGeometry(){this.geometry=new b(this.radiusTop,this.radiusBottom,this.height,this.radialSegments,this.heightSegments,this.openEnded,this.thetaStart,this.thetaLength)}}},st={extends:Ke,props:{radius:{type:Number,default:1},detail:{type:Number,default:0}},methods:{createGeometry(){this.geometry=new v(this.radius,this.detail)}}},rt={extends:Ke,props:{radius:{type:Number,default:1},detail:{type:Number,default:0}},methods:{createGeometry(){this.geometry=new S(this.radius,this.detail)}}},it={extends:Ke,props:{points:Array,segments:{type:Number,default:12},phiStart:{type:Number,default:0},phiLength:{type:Number,default:2*Math.PI}},methods:{createGeometry(){this.geometry=new x(this.points,this.segments,this.phiStart,this.phiLength)}}},at={extends:Ke,props:{radius:{type:Number,default:1},detail:{type:Number,default:0}},methods:{createGeometry(){this.geometry=new w(this.radius,this.detail)}}},ht={extends:Ke,props:{vertices:Array,indices:Array,radius:{type:Number,default:1},detail:{type:Number,default:0}},methods:{createGeometry(){this.geometry=new N(this.vertices,this.indices,this.radius,this.detail)}}},nt={extends:Ke,props:{innerRadius:{type:Number,default:.5},outerRadius:{type:Number,default:1},thetaSegments:{type:Number,default:8},phiSegments:{type:Number,default:1},thetaStart:{type:Number,default:0},thetaLength:{type:Number,default:2*Math.PI}},methods:{createGeometry(){this.geometry=new _(this.innerRadius,this.outerRadius,this.thetaSegments,this.phiSegments,this.thetaStart,this.thetaLength)}}},ot={extends:Ke,props:{radius:{type:Number,default:1},widthSegments:{type:Number,default:12},heightSegments:{type:Number,default:12}},methods:{createGeometry(){this.geometry=new M(this.radius,this.widthSegments,this.heightSegments)}}},dt={extends:Ke,props:{radius:{type:Number,default:1},detail:{type:Number,default:0}},methods:{createGeometry(){this.geometry=new z(this.radius,this.detail)}}},ut={extends:Ke,props:{radius:{type:Number,default:1},tube:{type:Number,default:.4},radialSegments:{type:Number,default:8},tubularSegments:{type:Number,default:6},arc:{type:Number,default:2*Math.PI}},methods:{createGeometry(){this.geometry=new C(this.radius,this.tube,this.radialSegments,this.tubularSegments,this.arc)}}},mt={extends:Ke,props:{radius:{type:Number,default:1},tube:{type:Number,default:.4},tubularSegments:{type:Number,default:64},radialSegments:{type:Number,default:8},p:{type:Number,default:2},q:{type:Number,default:3}},methods:{createGeometry(){this.geometry=new P(this.radius,this.tube,this.tubularSegments,this.radialSegments,this.p,this.q)}}},lt={extends:Ke,props:{path:G,tubularSegments:{type:Number,default:64},radius:{type:Number,default:1},radiusSegments:{type:Number,default:8},closed:{type:Boolean,default:!1}},methods:{createGeometry(){this.geometry=new I(this.path,this.tubularSegments,this.radius,this.radiusSegments,this.closed)}}},ct={extends:Ye,name:"Light",props:{color:{type:String,default:"#ffffff"},intensity:{type:Number,default:1},castShadow:{type:Boolean,default:!1},shadowMapSize:{type:Object,default:{x:512,y:512}}},unmounted(){this.light.target&&this.$parent.remove(this.light.target)},methods:{initLight(){this.light.target&&$e(this,"target",this.light.target,"position"),this.light.shadow&&(this.light.castShadow=this.castShadow,Fe(this.light.shadow.mapSize,this.shadowMapSize)),["color","intensity","castShadow"].forEach((e=>{d((()=>this[e]),(()=>{"color"===e?this.light.color=new p(this.color):this.light[e]=this[e]}))})),this.initObject3D(this.light),this.light.target&&this.$parent.add(this.light.target)}},__hmrId:"Light"},pt={extends:ct,created(){this.light=new k(this.color,this.intensity),this.initLight()},__hmrId:"AmbientLight"},ft={extends:ct,props:{target:Object},created(){this.light=new R(this.color,this.intensity),this.initLight()},__hmrId:"DirectionalLight"},gt={extends:ct,props:{groundColor:{type:String,default:"#ffffff"}},created(){this.light=new L(this.color,this.groundColor,this.intensity),$e(this,"groundColor",this.light),this.initLight()},__hmrId:"HemisphereLight"},yt={extends:ct,props:{distance:{type:Number,default:0},decay:{type:Number,default:1}},created(){this.light=new E(this.color,this.intensity,this.distance,this.decay),this.initLight()},__hmrId:"PointLight"},bt={extends:ct,props:{width:{type:Number,default:10},height:{type:Number,default:10},helper:Boolean},created(){T.init(),this.light=new B(this.color,this.intensity,this.width,this.height),["width","height"].forEach((e=>{d((()=>this[e]),(()=>{this.light[e]=this[e]}))})),this.helper&&(this.lightHelper=new A(this.light),this.$parent.add(this.lightHelper)),this.initLight()},unmounted(){this.lightHelper&&this.$parent.remove(this.lightHelper)},__hmrId:"RectAreaLight"},vt={extends:ct,props:{angle:{type:Number,default:Math.PI/3},decay:{type:Number,default:1},distance:{type:Number,default:0},penumbra:{type:Number,default:0},target:Object},created(){this.light=new j(this.color,this.intensity,this.distance,this.angle,this.penumbra,this.decay),["angle","decay","distance","penumbra"].forEach((e=>{d((()=>this[e]),(()=>{this.light[e]=this[e]}))})),this.initLight()},__hmrId:"SpotLight"},St={inject:["three","mesh"],props:{color:{type:[String,Number],default:"#ffffff"},depthTest:{type:Boolean,default:!0},depthWrite:{type:Boolean,default:!0},flatShading:Boolean,fog:{type:Boolean,default:!0},opacity:{type:Number,default:1},side:{type:Number,default:O},transparent:Boolean,vertexColors:Boolean},provide(){return{material:this}},created(){this.createMaterial(),this.mesh.setMaterial(this.material),this._addWatchers(),this.addWatchers&&this.addWatchers()},unmounted(){this.material.dispose()},methods:{setProp(e,t,s=!1){this.material[e]=t,this.material.needsUpdate=s},setTexture(e,t="map"){this.setProp(t,e,!0)},_addWatchers(){["color","depthTest","depthWrite","fog","opacity","side","transparent"].forEach((e=>{d((()=>this[e]),(()=>{"color"===e?this.material.color.set(this.color):this.material[e]=this[e]}))}))}},render(){return this.$slots.default?this.$slots.default():[]},__hmrId:"Material"},xt={extends:St,methods:{createMaterial(){this.material=new U(De(this.$props))}},__hmrId:"BasicMaterial"},wt={extends:St,methods:{createMaterial(){this.material=new F(De(this.$props))}},__hmrId:"LambertMaterial"},Nt={extends:St,props:{src:String,name:String},methods:{createMaterial(){const e=this.name?We(this.name):this.src,t=De(this.$props,["src","name"]);t.matcap=(new $).load(e),this.material=new D(t)}},__hmrId:"MatcapMaterial"},_t={extends:St,props:{emissive:{type:[Number,String],default:0},emissiveIntensity:{type:Number,default:1},reflectivity:{type:Number,default:1},shininess:{type:Number,default:30},specular:{type:[String,Number],default:1118481}},methods:{createMaterial(){this.material=new H(De(this.$props))},addWatchers(){["emissive","emissiveIntensity","reflectivity","shininess","specular"].forEach((e=>{d((()=>this[e]),(t=>{"emissive"===e||"specular"===e?this.material[e].set(t):this.material[e]=t}))}))}},__hmrId:"PhongMaterial"};const Mt={aoMapIntensity:{type:Number,default:1},bumpScale:{type:Number,default:1},displacementBias:{type:Number,default:0},displacementScale:{type:Number,default:1},emissive:{type:[Number,String],default:0},emissiveIntensity:{type:Number,default:1},envMapIntensity:{type:Number,default:1},lightMapIntensity:{type:Number,default:1},metalness:{type:Number,default:0},normalScale:{type:Object,default:{x:1,y:1}},roughness:{type:Number,default:1},refractionRatio:{type:Number,default:.98},wireframe:Boolean};var zt={extends:St,props:Mt,methods:{createMaterial(){this.material=new W(De(this.$props,["normalScale"]))},addWatchers(){Object.keys(Mt).forEach((e=>{"normalScale"!==e&&d((()=>this[e]),(t=>{"emissive"===e?this.material[e].set(t):this.material[e]=t}))})),$e(this,"normalScale",this.material)}},__hmrId:"StandardMaterial"},Ct={extends:zt,methods:{createMaterial(){this.material=new V(De(this.$props))}},__hmrId:"PhysicalMaterial"};const Pt=X.meshphong_frag.slice(0,X.meshphong_frag.indexOf("void main() {")),Gt=X.meshphong_frag.slice(X.meshphong_frag.indexOf("void main() {")),It={uniforms:Y.merge([Z.phong.uniforms,{thicknessColor:{value:new p(6718871)},thicknessDistortion:{value:.1},thicknessAmbient:{value:0},thicknessAttenuation:{value:.1},thicknessPower:{value:2},thicknessScale:{value:10}}]),vertexShader:`\n    #define USE_UV\n    ${X.meshphong_vert}\n  `,fragmentShader:`\n    #define USE_UV\n    #define SUBSURFACE\n\n    ${Pt}\n\n    uniform float thicknessPower;\n    uniform float thicknessScale;\n    uniform float thicknessDistortion;\n    uniform float thicknessAmbient;\n    uniform float thicknessAttenuation;\n    uniform vec3 thicknessColor;\n\n    void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in GeometricContext geometry, inout ReflectedLight reflectedLight) {\n      #ifdef USE_COLOR\n        vec3 thickness = vColor * thicknessColor;\n      #else\n        vec3 thickness = thicknessColor;\n      #endif\n      vec3 scatteringHalf = normalize(directLight.direction + (geometry.normal * thicknessDistortion));\n      float scatteringDot = pow(saturate(dot(geometry.viewDir, -scatteringHalf)), thicknessPower) * thicknessScale;\n      vec3 scatteringIllu = (scatteringDot + thicknessAmbient) * thickness;\n      reflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;\n    }\n  `+Gt.replace("#include <lights_fragment_begin>",(kt=X.lights_fragment_begin,Rt="RE_Direct( directLight, geometry, material, reflectedLight );",Lt="\n        RE_Direct( directLight, geometry, material, reflectedLight );\n        #if defined( SUBSURFACE ) && defined( USE_UV )\n          RE_Direct_Scattering(directLight, vUv, geometry, reflectedLight);\n        #endif\n      ",kt.split(Rt).join(Lt)))};var kt,Rt,Lt,Et={extends:{inject:["three","mesh"],props:{uniforms:Object,vertexShader:String,fragmentShader:String},created(){this.createMaterial(),this.mesh.setMaterial(this.material),this.addWatchers&&this.addWatchers()},unmounted(){this.material.dispose()},render:()=>[],__hmrId:"ShaderMaterial"},props:{color:{type:String,default:"#ffffff"},thicknessColor:{type:String,default:"#ffffff"},thicknessDistortion:{type:Number,default:.4},thicknessAmbient:{type:Number,default:.01},thicknessAttenuation:{type:Number,default:.7},thicknessPower:{type:Number,default:2},thicknessScale:{type:Number,default:4},transparent:{type:Boolean,default:!1},opacity:{type:Number,default:1},vertexColors:{type:Boolean,default:!1}},methods:{createMaterial(){const t=It,s=Y.clone(t.uniforms);Object.entries(this.$props).forEach((([e,t])=>{let r=e,i=t;["color","thicknessColor"].includes(e)&&("color"===e&&(r="diffuse"),i=new p(t)),["transparent","vertexColors"].includes(e)||(s[r].value=i)})),this.material=new q(e(e({},t),{uniforms:s,lights:!0,transparent:this.transparent,vertexColors:this.vertexColors}))}},__hmrId:"SubSurfaceMaterial"},Tt={extends:St,methods:{createMaterial(){this.material=new K(De(this.$props))}},__hmrId:"ToonMaterial"},Bt={inject:["material"],emits:["loaded"],props:{id:{type:String,default:"map"},src:String,onLoad:Function,onProgress:Function,onError:Function,mapping:{type:Number,default:J},wrapS:{type:Number,default:Q},wrapT:{type:Number,default:Q},magFilter:{type:Number,default:ee},minFilter:{type:Number,default:te},repeat:{type:Object,default:{x:1,y:1}},rotation:{type:Number,default:0},center:{type:Object,default:{x:0,y:0}}},created(){this.refreshTexture(),d((()=>this.src),this.refreshTexture)},unmounted(){this.material.setTexture(null,this.id),this.texture.dispose()},methods:{createTexture(){this.texture=(new $).load(this.src,this.onLoaded,this.onProgress,this.onError);["mapping","wrapS","wrapT","magFilter","minFilter","repeat","rotation","rotation","center"].forEach((e=>{$e(this,e,this.texture)}))},refreshTexture(){this.createTexture(),this.material.setTexture(this.texture,this.id)},onLoaded(){this.onLoad&&this.onLoad(),this.$emit("loaded")}},render:()=>[]},At={inject:["material"],emits:["loaded"],props:{path:String,urls:{type:Array,default:["px.jpg","nx.jpg","py.jpg","ny.jpg","pz.jpg","nz.jpg"]},onLoad:Function,onProgress:Function,onError:Function,id:{type:String,default:"envMap"},refraction:Boolean,refractionRatio:{type:Number,default:.98}},created(){this.refreshTexture(),d((()=>this.path),this.refreshTexture),d((()=>this.urls),this.refreshTexture)},unmounted(){this.material.setTexture(null,this.id),this.texture.dispose()},methods:{createTexture(){this.texture=(new se).setPath(this.path).load(this.urls,this.onLoaded,this.onProgress,this.onError)},refreshTexture(){this.createTexture(),this.material.setTexture(this.texture,this.id),this.refraction&&(this.texture.mapping=re,this.material.setProp("refractionRatio",this.refractionRatio))},onLoaded(){this.onLoad&&this.onLoad(),this.$emit("loaded")}},render:()=>[]},jt={extends:Ye,name:"Mesh",props:{castShadow:Boolean,receiveShadow:Boolean,onHover:Function,onClick:Function},provide(){return{mesh:this}},mounted(){this.mesh||this.loading||this.initMesh()},methods:{initMesh(){this.mesh=new ie(this.geometry,this.material),["castShadow","receiveShadow"].forEach((e=>{this.mesh[e]=this[e],d((()=>this[e]),(()=>{this.mesh[e]=this[e]}))})),this.onHover&&(this.mesh.onHover=e=>{this.onHover({component:this,over:e})},this.three.addIntersectObject(this.mesh)),this.onClick&&(this.mesh.onClick=e=>{this.onClick({component:this,event:e})},this.three.addIntersectObject(this.mesh)),this.initObject3D(this.mesh)},setGeometry(e){this.geometry=e,this.mesh&&(this.mesh.geometry=e)},setMaterial(e){this.material=e,this.mesh&&(this.mesh.material=e)},refreshGeometry(){const e=this.geometry;this.createGeometry(),this.mesh.geometry=this.geometry,e.dispose()}},unmounted(){this.mesh&&this.three.removeIntersectObject(this.mesh),this.geometry&&this.geometry.dispose(),this.material&&this.material.dispose()},__hmrId:"Mesh"},Ot={extends:jt,props:{size:Number,width:{type:Number,default:1},height:{type:Number,default:1},depth:{type:Number,default:1},widthSegments:{type:Number,default:1},heightSegments:{type:Number,default:1},depthSegments:{type:Number,default:1}},created(){this.createGeometry(),["size","width","height","depth","widthSegments","heightSegments","depthSegments"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.size?this.geometry=new f(this.size,this.size,this.size):this.geometry=new f(this.width,this.height,this.depth)}},__hmrId:"Box"},Ut={extends:jt,props:{radius:{type:Number,default:1},segments:{type:Number,default:8},thetaStart:{type:Number,default:0},thetaLength:{type:Number,default:2*Math.PI}},created(){this.createGeometry();["radius","segments","thetaStart","thetaLength"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new g(this.radius,this.segments,this.thetaStart,this.thetaLength)}},__hmrId:"Circle"},Ft={extends:jt,props:{radius:{type:Number,default:1},height:{type:Number,default:1},radialSegments:{type:Number,default:8},heightSegments:{type:Number,default:1},openEnded:{type:Boolean,default:!1},thetaStart:{type:Number,default:0},thetaLength:{type:Number,default:2*Math.PI}},created(){this.createGeometry();["radius","height","radialSegments","heightSegments","openEnded","thetaStart","thetaLength"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new y(this.radius,this.height,this.radialSegments,this.heightSegments,this.openEnded,this.thetaStart,this.thetaLength)}},__hmrId:"Cone"},$t={extends:jt,props:{radiusTop:{type:Number,default:1},radiusBottom:{type:Number,default:1},height:{type:Number,default:1},radialSegments:{type:Number,default:8},heightSegments:{type:Number,default:1},openEnded:{type:Boolean,default:!1},thetaStart:{type:Number,default:0},thetaLength:{type:Number,default:2*Math.PI}},created(){this.createGeometry();["radiusTop","radiusBottom","height","radialSegments","heightSegments","openEnded","thetaStart","thetaLength"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new b(this.radiusTop,this.radiusBottom,this.height,this.radialSegments,this.heightSegments,this.openEnded,this.thetaStart,this.thetaLength)}},__hmrId:"Cylinder"},Dt={extends:jt,props:{radius:{type:Number,default:1},detail:{type:Number,default:0}},created(){this.createGeometry();["radius","detail"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new v(this.radius,this.detail)}},__hmrId:"Dodecahedron"},Ht={extends:jt,props:{radius:{type:Number,default:1},detail:{type:Number,default:0}},created(){this.createGeometry();["radius","detail"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new S(this.radius,this.detail)}},__hmrId:"Icosahedron"},Wt={extends:jt,props:{points:Array,segments:{type:Number,default:12},phiStart:{type:Number,default:0},phiLength:{type:Number,default:2*Math.PI}},created(){this.createGeometry();["points","segments","phiStart","phiLength"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new x(this.points,this.segments,this.phiStart,this.phiLength)}},__hmrId:"Lathe"},Vt={extends:jt,props:{radius:{type:Number,default:1},detail:{type:Number,default:0}},created(){this.createGeometry();["radius","detail"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new w(this.radius,this.detail)}},__hmrId:"Octahedron"},Xt={extends:jt,props:{width:{type:Number,default:1},height:{type:Number,default:1},widthSegments:{type:Number,default:1},heightSegments:{type:Number,default:1}},created(){this.createGeometry();["width","height","widthSegments","heightSegments"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new ae(this.width,this.height,this.widthSegments,this.heightSegments)}},__hmrId:"Plane"},Yt={extends:jt,props:{vertices:Array,indices:Array,radius:{type:Number,default:1},detail:{type:Number,default:0}},created(){this.createGeometry();["vertices","indices","radius","detail"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new N(this.vertices,this.indices,this.radius,this.detail)}},__hmrId:"Polyhedron"},Zt={extends:jt,props:{innerRadius:{type:Number,default:.5},outerRadius:{type:Number,default:1},thetaSegments:{type:Number,default:8},phiSegments:{type:Number,default:1},thetaStart:{type:Number,default:0},thetaLength:{type:Number,default:2*Math.PI}},created(){this.createGeometry();["innerRadius","outerRadius","thetaSegments","phiSegments","thetaStart","thetaLength"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new _(this.innerRadius,this.outerRadius,this.thetaSegments,this.phiSegments,this.thetaStart,this.thetaLength)}},__hmrId:"Ring"},qt={extends:jt,props:{radius:Number,widthSegments:{type:Number,default:12},heightSegments:{type:Number,default:12}},watch:{radius(){this.refreshGeometry()},widthSegments(){this.refreshGeometry()},heightSegments(){this.refreshGeometry()}},created(){this.createGeometry()},methods:{createGeometry(){this.geometry=new M(this.radius,this.widthSegments,this.heightSegments)}},__hmrId:"Sphere"},Kt={extends:jt,props:{radius:{type:Number,default:1},detail:{type:Number,default:0}},created(){this.createGeometry();["radius","detail"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new z(this.radius,this.detail)}},__hmrId:"Tetrahedron"},Jt={text:String,fontSrc:String,size:{type:Number,default:80},height:{type:Number,default:5},depth:{type:Number,default:1},curveSegments:{type:Number,default:12},bevelEnabled:{type:Boolean,default:!1},bevelThickness:{type:Number,default:10},bevelSize:{type:Number,default:8},bevelOffset:{type:Number,default:0},bevelSegments:{type:Number,default:5},align:{type:[Boolean,String],default:!1}},Qt={extends:jt,props:e({},Jt),data:()=>({loading:!0}),created(){["text","size","height","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","align"].forEach((e=>{d((()=>this[e]),(()=>{this.font&&this.refreshGeometry()}))}));(new he).load(this.fontSrc,(e=>{this.loading=!1,this.font=e,this.createGeometry(),this.initMesh()}))},methods:{createGeometry(){this.geometry=new ne(this.text,{font:this.font,size:this.size,height:this.height,depth:this.depth,curveSegments:this.curveSegments,bevelEnabled:this.bevelEnabled,bevelThickness:this.bevelThickness,bevelSize:this.bevelSize,bevelOffset:this.bevelOffset,bevelSegments:this.bevelSegments}),"center"===this.align&&this.geometry.center()}}},es={extends:jt,props:{radius:{type:Number,default:.5},tube:{type:Number,default:.4},radialSegments:{type:Number,default:8},tubularSegments:{type:Number,default:6},arc:{type:Number,default:2*Math.PI}},created(){this.createGeometry();["radius","tube","radialSegments","tubularSegments","arc"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new C(this.radius,this.tube,this.radialSegments,this.tubularSegments,this.arc)}},__hmrId:"Torus"},ts={extends:jt,props:{radius:{type:Number,default:.5},tube:{type:Number,default:.4},tubularSegments:{type:Number,default:64},radialSegments:{type:Number,default:8},p:{type:Number,default:2},q:{type:Number,default:3}},created(){this.createGeometry();["radius","tube","radialSegments","tubularSegments","p","q"].forEach((e=>{d((()=>this[e]),(()=>{this.refreshGeometry()}))}))},methods:{createGeometry(){this.geometry=new P(this.radius,this.tube,this.tubularSegments,this.radialSegments,this.p,this.q)}},__hmrId:"TorusKnot"},ss={extends:jt,props:{path:G,points:Array,tubularSegments:{type:Number,default:64},radius:{type:Number,default:1},radialSegments:{type:Number,default:8},closed:{type:Boolean,default:!1}},created(){this.createGeometry();["tubularSegments","radius","radialSegments","closed"].forEach((e=>{d((()=>this[e]),(e=>{this.refreshGeometry()}))})),d((()=>this.points),(()=>{rs(this.geometry,this.points)}))},methods:{createGeometry(){let e;this.points?e=new oe(this.points):this.path?e=this.path:console.error("Missing path curve or points."),this.geometry=new I(e,this.tubularSegments,this.radius,this.radialSegments,this.closed)},updateCurve(e){rs(this.geometry,e)}},__hmrId:"Tube"};function rs(e,t){const s=new oe(t),{radialSegments:r,radius:i,tubularSegments:h,closed:n}=e.parameters,o=s.computeFrenetFrames(h,n);e.tangents=o.tangents,e.normals=o.normals,e.binormals=o.binormals,e.parameters.path=s;const d=e.attributes.position.array,u=e.attributes.normal.array,m=new a;let l;for(let a=0;a<h;a++)c(a);function c(e){l=s.getPointAt(e/h,l);const t=o.normals[e],a=o.binormals[e];for(let s=0;s<=r;s++){const h=s/r*Math.PI*2,n=Math.sin(h),o=-Math.cos(h);m.x=o*t.x+n*a.x,m.y=o*t.y+n*a.y,m.z=o*t.z+n*a.z,m.normalize();const c=3*(e*(r+1)+s);u[c]=m.x,u[c+1]=m.y,u[c+2]=m.z,d[c]=l.x+i*m.x,d[c+1]=l.y+i*m.y,d[c+2]=l.z+i*m.z}}c(h),e.attributes.position.needsUpdate=!0,e.attributes.normal.needsUpdate=!0}var is={extends:jt,props:{cubeRTSize:{type:Number,default:256},cubeCameraNear:{type:Number,default:.1},cubeCameraFar:{type:Number,default:2e3},autoUpdate:Boolean},mounted(){this.initGem(),this.autoUpdate?this.three.onBeforeRender(this.updateCubeRT):this.rendererComponent.onMounted(this.updateCubeRT)},unmounted(){this.three.offBeforeRender(this.updateCubeRT),this.meshBack&&this.$parent.remove(this.meshBack),this.materialBack&&this.materialBack.dispose()},methods:{initGem(){const e=new de(this.cubeRTSize,{format:ue,generateMipmaps:!0,minFilter:te});this.cubeCamera=new me(this.cubeCameraNear,this.cubeCameraFar,e),$e(this,"position",this.cubeCamera),this.$parent.add(this.cubeCamera),this.material.side=O,this.material.envMap=e.texture,this.material.envMapIntensity=10,this.material.metalness=0,this.material.roughness=0,this.material.opacity=.75,this.material.transparent=!0,this.material.premultipliedAlpha=!0,this.material.needsUpdate=!0,this.materialBack=this.material.clone(),this.materialBack.side=le,this.materialBack.envMapIntensity=5,this.materialBack.metalness=1,this.materialBack.roughness=0,this.materialBack.opacity=.5,this.meshBack=new ie(this.geometry,this.materialBack),$e(this,"position",this.meshBack),$e(this,"rotation",this.meshBack),$e(this,"scale",this.meshBack),this.$parent.add(this.meshBack)},updateCubeRT(){this.mesh.visible=!1,this.meshBack.visible=!1,this.cubeCamera.update(this.three.renderer,this.scene),this.mesh.visible=!0,this.meshBack.visible=!0}},__hmrId:"Gem"},as={emits:["loaded"],extends:jt,props:{src:String,width:Number,height:Number,keepSize:Boolean},created(){this.createGeometry(),this.createMaterial(),this.initMesh(),d((()=>this.src),this.refreshTexture),["width","height"].forEach((e=>{d((()=>this[e]),this.resize)})),this.keepSize&&this.three.onAfterResize(this.resize)},methods:{createGeometry(){this.geometry=new ae(1,1,1,1)},createMaterial(){this.material=new U({side:ce,map:this.loadTexture()})},loadTexture(){return(new $).load(this.src,this.onLoaded)},refreshTexture(){this.texture&&this.texture.dispose(),this.material.map=this.loadTexture(),this.material.needsUpdate=!0},onLoaded(e){this.texture=e,this.resize(),this.$emit("loaded")},resize(){if(!this.texture)return;const e=this.three.size,t=this.texture.image.width/this.texture.image.height;let s,r;this.width&&this.height?(s=this.width*e.wWidth/e.width,r=this.height*e.wHeight/e.height):this.width?(s=this.width*e.wWidth/e.width,r=s/t):this.height&&(r=this.height*e.wHeight/e.height,s=r*t),this.mesh.scale.x=s,this.mesh.scale.y=r}},__hmrId:"Image"},hs={extends:Ye,props:{castShadow:Boolean,receiveShadow:Boolean,count:Number},provide(){return{mesh:this}},beforeMount(){this.$slots.default||console.error("Missing Geometry")},created(){this.initMesh()},methods:{initMesh(){this.mesh=new pe(this.geometry,this.material,this.count),["castShadow","receiveShadow"].forEach((e=>{this.mesh[e]=this[e],d((()=>this[e]),(()=>{this.mesh[e]=this[e]}))})),this.initObject3D(this.mesh)},setGeometry(e){this.geometry=e,this.mesh&&(this.mesh.geometry=e)},setMaterial(e){this.material=e,this.mesh&&(this.mesh.material=e)}},__hmrId:"InstancedMesh"},ns={extends:jt,props:{cubeRTSize:{type:Number,default:256},cubeCameraNear:{type:Number,default:.1},cubeCameraFar:{type:Number,default:2e3},autoUpdate:Boolean},mounted(){this.initMirrorMesh(),this.autoUpdate?this.three.onBeforeRender(this.updateCubeRT):this.rendererComponent.onMounted(this.updateCubeRT)},unmounted(){this.three.offBeforeRender(this.updateCubeRT),this.cubeCamera&&this.$parent.remove(this.cubeCamera)},methods:{initMirrorMesh(){const e=new de(this.cubeRTSize,{format:ue,generateMipmaps:!0,minFilter:te});this.cubeCamera=new me(this.cubeCameraNear,this.cubeCameraFar,e),this.$parent.add(this.cubeCamera),this.material.envMap=e.texture,this.material.needsUpdate=!0},updateCubeRT(){this.mesh.visible=!1,this.cubeCamera.update(this.three.renderer,this.scene),this.mesh.visible=!0}},__hmrId:"MirrorMesh"},os={extends:jt,props:{cubeRTSize:{type:Number,default:256},cubeCameraNear:{type:Number,default:.1},cubeCameraFar:{type:Number,default:2e3},refractionRatio:{type:Number,default:.98},autoUpdate:Boolean},mounted(){this.initMirrorMesh(),this.autoUpdate?this.three.onBeforeRender(this.updateCubeRT):this.rendererComponent.onMounted(this.updateCubeRT)},unmounted(){this.three.offBeforeRender(this.updateCubeRT),this.cubeCamera&&this.$parent.remove(this.cubeCamera)},methods:{initMirrorMesh(){const e=new de(this.cubeRTSize,{mapping:re,format:ue,generateMipmaps:!0,minFilter:te});this.cubeCamera=new me(this.cubeCameraNear,this.cubeCameraFar,e),$e(this,"position",this.cubeCamera),this.$parent.add(this.cubeCamera),this.material.envMap=e.texture,this.material.refractionRatio=this.refractionRatio,this.material.needsUpdate=!0},updateCubeRT(){this.mesh.visible=!1,this.cubeCamera.update(this.three.renderer,this.scene),this.mesh.visible=!0}},__hmrId:"RefractionMesh"},ds={extends:Ye,emits:["loaded"],props:{src:String},data:()=>({loading:!0}),created(){this.texture=(new $).load(this.src,this.onLoaded),this.material=new fe({map:this.texture}),this.sprite=new ge(this.material),this.geometry=this.sprite.geometry,this.initObject3D(this.sprite)},unmounted(){this.texture.dispose(),this.material.dispose()},methods:{onLoaded(){this.loading=!1,this.updateUV(),this.$emit("loaded")},updateUV(){this.iWidth=this.texture.image.width,this.iHeight=this.texture.image.height,this.iRatio=this.iWidth/this.iHeight;let e=.5,t=.5;this.iRatio>1?t=.5/this.iRatio:e=.5/this.iRatio;const s=this.geometry.attributes.position.array;s[0]=-e,s[1]=-t,s[5]=e,s[6]=-t,s[10]=e,s[11]=t,s[15]=-e,s[16]=t,this.geometry.attributes.position.needsUpdate=!0}},__hmrId:"Sprite"},us={setup:()=>({passes:[]}),inject:["three"],provide(){return{passes:this.passes}},mounted(){this.three.onAfterInit((()=>{this.composer=new ye(this.three.renderer),this.three.renderer.autoClear=!1,this.passes.forEach((e=>{this.composer.addPass(e)})),this.three.composer=this.composer,this.resize(),this.three.onAfterResize(this.resize)}))},unmounted(){this.three.offAfterResize(this.resize)},methods:{resize(){this.composer.setSize(this.three.size.width,this.three.size.height)}},render(){return this.$slots.default()},__hmrId:"EffectComposer"},ms={inject:["three","passes"],beforeMount(){this.passes||console.error("Missing parent EffectComposer")},unmounted(){this.pass.dispose&&this.pass.dispose()},render:()=>[],__hmrId:"EffectPass"},ls={extends:ms,mounted(){this.three.scene||console.error("Missing Scene"),this.three.camera||console.error("Missing Camera");const e=new be(this.three.scene,this.three.camera);this.passes.push(e),this.pass=e},__hmrId:"RenderPass"},cs={extends:ms,props:{focus:{type:Number,default:1},aperture:{type:Number,default:.025},maxblur:{type:Number,default:.01}},watch:{focus(){this.pass.uniforms.focus.value=this.focus},aperture(){this.pass.uniforms.aperture.value=this.aperture},maxblur(){this.pass.uniforms.maxblur.value=this.maxblur}},mounted(){this.three.scene||console.error("Missing Scene"),this.three.camera||console.error("Missing Camera");const e={focus:this.focus,aperture:this.aperture,maxblur:this.maxblur,width:this.three.size.width,height:this.three.size.height},t=new ve(this.three.scene,this.three.camera,e);this.passes.push(t),this.pass=t},__hmrId:"BokehPass"},ps={extends:ms,props:{noiseIntensity:{type:Number,default:.5},scanlinesIntensity:{type:Number,default:.05},scanlinesCount:{type:Number,default:4096},grayscale:{type:Number,default:0}},watch:{noiseIntensity(){this.pass.uniforms.nIntensity.value=this.noiseIntensity},scanlinesIntensity(){this.pass.uniforms.sIntensity.value=this.scanlinesIntensity},scanlinesCount(){this.pass.uniforms.sCount.value=this.scanlinesCount},grayscale(){this.pass.uniforms.grayscale.value=this.grayscale}},mounted(){const e=new Se(this.noiseIntensity,this.scanlinesIntensity,this.scanlinesCount,this.grayscale);this.passes.push(e),this.pass=e},__hmrId:"FilmPass"},fs={extends:ms,mounted(){const e=new xe(we);this.passes.push(e),this.pass=e,this.three.onAfterResize(this.resize)},unmounted(){this.three.offAfterResize(this.resize)},methods:{resize(){const{resolution:e}=this.pass.material.uniforms;e.value.x=1/this.three.size.width,e.value.y=1/this.three.size.height}},__hmrId:"FXAAPass"},gs={extends:ms,props:{shape:{type:Number,default:1},radius:{type:Number,default:4},rotateR:{type:Number,default:Math.PI/12*1},rotateG:{type:Number,default:Math.PI/12*2},rotateB:{type:Number,default:Math.PI/12*3},scatter:{type:Number,default:0}},mounted(){const e=new Ne(this.three.size.width,this.three.size.height,{});["shape","radius","rotateR","rotateG","rotateB","scatter"].forEach((t=>{e.uniforms[t].value=this[t],d((()=>this[t]),(()=>{e.uniforms[t].value=this[t]}))})),this.passes.push(e),this.pass=e},__hmrId:"HalftonePass"},ys={extends:ms,mounted(){const e=new _e(this.three.size.width,this.three.size.height);this.passes.push(e),this.pass=e},__hmrId:"SMAAPass"},bs={uniforms:{},vertexShader:"\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ",fragmentShader:"\n    varying vec2 vUv;\n    void main() {\n      gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    }\n  "},vs={uniforms:{tDiffuse:{value:null},blurRadius:{value:0},gradientRadius:{value:0},start:{value:new i},end:{value:new i},delta:{value:new i},texSize:{value:new i}},vertexShader:bs.vertexShader,fragmentShader:"\n    uniform sampler2D tDiffuse;\n    uniform float blurRadius;\n    uniform float gradientRadius;\n    uniform vec2 start;\n    uniform vec2 end;\n    uniform vec2 delta;\n    uniform vec2 texSize;\n    varying vec2 vUv;\n\n    float random(vec3 scale, float seed) {\n      /* use the fragment position for a different seed per-pixel */\n      return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n    }\n\n    void main() {\n      vec4 color = vec4(0.0);\n      float total = 0.0;\n\n      /* randomize the lookup values to hide the fixed number of samples */\n      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n\n      vec2 normal = normalize(vec2(start.y - end.y, end.x - start.x));\n      float radius = smoothstep(0.0, 1.0, abs(dot(vUv * texSize - start, normal)) / gradientRadius) * blurRadius;\n      for (float t = -30.0; t <= 30.0; t++) {\n          float percent = (t + offset - 0.5) / 30.0;\n          float weight = 1.0 - abs(percent);\n          vec4 texel = texture2D(tDiffuse, vUv + delta / texSize * percent * radius);\n          // vec4 texel2 = texture2D(tDiffuse, vUv + vec2(-delta.y, delta.x) / texSize * percent * radius);\n\n          /* switch to pre-multiplied alpha to correctly blur transparent images */\n          texel.rgb *= texel.a;\n          // texel2.rgb *= texel2.a;\n\n          color += texel * weight;\n          total += 2.0 * weight;\n      }\n\n      gl_FragColor = color / total;\n\n      /* switch back from pre-multiplied alpha */\n      gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n    }\n  "},Ss={extends:ms,props:{blurRadius:{type:Number,default:10},gradientRadius:{type:Number,default:100},start:{type:Object,default:{x:0,y:100}},end:{type:Object,default:{x:10,y:100}}},mounted(){this.pass=new xe(vs),this.passes.push(this.pass),this.pass1=new xe(vs),this.passes.push(this.pass1);const e=this.uniforms=this.pass.uniforms,t=this.uniforms1=this.pass1.uniforms;t.blurRadius=e.blurRadius,t.gradientRadius=e.gradientRadius,t.start=e.start,t.end=e.end,t.texSize=e.texSize,$e(this,"blurRadius",e.blurRadius,"value"),$e(this,"gradientRadius",e.gradientRadius,"value"),this.updateFocusLine(),["start","end"].forEach((e=>{d((()=>this[e]),this.updateFocusLine,{deep:!0})})),this.pass.setSize=(t,s)=>{e.texSize.value.set(t,s)}},methods:{updateFocusLine(){this.uniforms.start.value.copy(this.start),this.uniforms.end.value.copy(this.end);const e=(new i).copy(this.end).sub(this.start).normalize();this.uniforms.delta.value.copy(e),this.uniforms1.delta.value.set(-e.y,e.x)}},__hmrId:"TiltShiftPass"},xs={extends:ms,props:{strength:{type:Number,default:1.5},radius:{type:Number,default:0},threshold:{type:Number,default:0}},watch:{strength(){this.pass.strength=this.strength},radius(){this.pass.radius=this.radius},threshold(){this.pass.threshold=this.threshold}},mounted(){const e=new i(this.three.size.width,this.three.size.height),t=new Me(e,this.strength,this.radius,this.threshold);this.passes.push(t),this.pass=t},__hmrId:"UnrealBloomPass"},ws={uniforms:{tDiffuse:{value:null},center:{value:new i(.5,.5)},strength:{value:0}},vertexShader:bs.vertexShader,fragmentShader:"\n    uniform sampler2D tDiffuse;\n    uniform vec2 center;\n    uniform float strength;\n    varying vec2 vUv;\n\n    float random(vec3 scale, float seed) {\n      /* use the fragment position for a different seed per-pixel */\n      return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n    }\n    \n    void main() {\n      vec4 color = vec4(0.0);\n      float total = 0.0;\n      vec2 toCenter = center - vUv;\n      \n      /* randomize the lookup values to hide the fixed number of samples */\n      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n      \n      for (float t = 0.0; t <= 40.0; t++) {\n        float percent = (t + offset) / 40.0;\n        float weight = 4.0 * (percent - percent * percent);\n        vec4 texel = texture2D(tDiffuse, vUv + toCenter * percent * strength);\n\n        /* switch to pre-multiplied alpha to correctly blur transparent images */\n        texel.rgb *= texel.a;\n\n        color += texel * weight;\n        total += weight;\n      }\n\n      gl_FragColor = color / total;\n\n      /* switch back from pre-multiplied alpha */\n      gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n    }\n  "},Ns={extends:ms,props:{center:{type:Object,default:{x:.5,y:.5}},strength:{type:Number,default:.5}},mounted(){this.pass=new xe(ws),this.passes.push(this.pass);const e=this.uniforms=this.pass.uniforms;$e(this,"center",e.center,"value"),$e(this,"strength",e.strength,"value")},__hmrId:"ZoomBlurPass"},_s=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",Renderer:Ue,OrthographicCamera:Ve,PerspectiveCamera:Xe,Camera:Xe,Group:Ze,Scene:qe,BoxGeometry:Je,CircleGeometry:Qe,ConeGeometry:et,CylinderGeometry:tt,DodecahedronGeometry:st,IcosahedronGeometry:rt,LatheGeometry:it,OctahedronGeometry:at,PolyhedronGeometry:ht,RingGeometry:nt,SphereGeometry:ot,TetrahedronGeometry:dt,TorusGeometry:ut,TorusKnotGeometry:mt,TubeGeometry:lt,AmbientLight:pt,DirectionalLight:ft,HemisphereLight:gt,PointLight:yt,RectAreaLight:bt,SpotLight:vt,BasicMaterial:xt,LambertMaterial:wt,MatcapMaterial:Nt,PhongMaterial:_t,PhysicalMaterial:Ct,StandardMaterial:zt,SubSurfaceMaterial:Et,ToonMaterial:Tt,Texture:Bt,CubeTexture:At,Mesh:jt,Box:Ot,Circle:Ut,Cone:Ft,Cylinder:$t,Dodecahedron:Dt,Icosahedron:Ht,Lathe:Wt,Octahedron:Vt,Plane:Xt,Polyhedron:Yt,Ring:Zt,Sphere:qt,Tetrahedron:Kt,Text:Qt,Torus:es,TorusKnot:ts,Tube:ss,Gem:is,Image:as,InstancedMesh:hs,MirrorMesh:ns,RefractionMesh:os,Sprite:ds,EffectComposer:us,RenderPass:ls,BokehPass:cs,FilmPass:ps,FXAAPass:fs,HalftonePass:gs,SMAAPass:ys,TiltShiftPass:Ss,UnrealBloomPass:xs,ZoomBlurPass:Ns,setFromProp:Fe,bindProp:$e,propsValues:De,lerp:He,lerpv2:function(e,t,s){e.x=He(e.x,t.x,s),e.y=He(e.y,t.y,s)},lerpv3:function(e,t,s){e.x=He(e.x,t.x,s),e.y=He(e.y,t.y,s),e.z=He(e.z,t.z,s)},limit:function(e,t,s){return e<t?t:e>s?s:e},getMatcapUrl:We});const Ms={install:e=>{["Camera","OrthographicCamera","PerspectiveCamera","Renderer","Scene","Group","BoxGeometry","CircleGeometry","ConeGeometry","CylinderGeometry","DodecahedronGeometry","IcosahedronGeometry","LatheGeometry","OctahedronGeometry","PolyhedronGeometry","RingGeometry","SphereGeometry","TetrahedronGeometry","TorusGeometry","TorusKnotGeometry","TubeGeometry","AmbientLight","DirectionalLight","HemisphereLight","PointLight","RectAreaLight","SpotLight","BasicMaterial","LambertMaterial","MatcapMaterial","PhongMaterial","PhysicalMaterial","ShaderMaterial","StandardMaterial","SubSurfaceMaterial","ToonMaterial","Texture","CubeTexture","Box","Circle","Cone","Cylinder","Dodecahedron","Icosahedron","Mesh","Lathe","Octahedron","Plane","Polyhedron","Ring","Sphere","Tetrahedron","Text","Torus","TorusKnot","Tube","Gem","Image","InstancedMesh","MirrorMesh","RefractionMesh","Sprite","BokehPass","EffectComposer","FilmPass","FXAAPass","HalftonePass","RenderPass","SAOPass","SMAAPass","TiltShiftPass","UnrealBloomPass","ZoomBlurPass","GLTFViewer"].forEach((t=>{e.component(t,_s[t])}))}};class zs{constructor(e){Object.entries(e).forEach((([e,t])=>{this[e]=t})),this.o3d=new ze,this.uProgress={value:0},this.uvScale=new i,this.initMaterial(),this.initPlane()}initMaterial(){this.material=new U({side:ce,transparent:!0,map:this.texture,onBeforeCompile:e=>{e.uniforms.progress=this.uProgress,e.uniforms.uvScale={value:this.uvScale},e.vertexShader="\n          uniform float progress;\n          uniform vec2 uvScale;\n\n          attribute vec3 offset;\n          attribute vec3 rotation;\n          attribute vec2 uvOffset;\n\n          mat3 rotationMatrixXYZ(vec3 r)\n          {\n            float cx = cos(r.x);\n            float sx = sin(r.x);\n            float cy = cos(r.y);\n            float sy = sin(r.y);\n            float cz = cos(r.z);\n            float sz = sin(r.z);\n\n            return mat3(\n               cy * cz, cx * sz + sx * sy * cz, sx * sz - cx * sy * cz,\n              -cy * sz, cx * cz - sx * sy * sz, sx * cz + cx * sy * sz,\n                    sy,               -sx * cy,                cx * cy\n            );\n          }\n        "+e.vertexShader,e.vertexShader=e.vertexShader.replace("#include <uv_vertex>","\n          #include <uv_vertex>\n          vUv = vUv * uvScale + uvOffset;\n        "),e.vertexShader=e.vertexShader.replace("#include <project_vertex>","\n          mat3 rotMat = rotationMatrixXYZ(progress * rotation);\n          transformed = rotMat * transformed;\n\n          vec4 mvPosition = vec4(transformed, 1.0);\n          #ifdef USE_INSTANCING\n            mvPosition = instanceMatrix * mvPosition;\n          #endif\n\n          mvPosition.xyz += progress * offset;\n\n          mvPosition = modelViewMatrix * mvPosition;\n          gl_Position = projectionMatrix * mvPosition;\n        ")}})}initPlane(){const{width:e,wWidth:t,wHeight:s}=this.screen;this.wSize=this.size*t/e,this.nx=Math.ceil(t/this.wSize)+1,this.ny=Math.ceil(s/this.wSize)+1,this.icount=this.nx*this.ny,this.initGeometry(),this.initUV(),this.initAnimAttributes(),this.imesh&&this.o3d.remove(this.imesh),this.imesh=new pe(this.bGeometry,this.material,this.icount),this.o3d.add(this.imesh);const r=new ze;let i=0,a=-(t-(t-this.nx*this.wSize))/2+this.dx;for(let h=0;h<this.nx;h++){let e=-(s-(s-this.ny*this.wSize))/2+this.dy;for(let t=0;t<this.ny;t++)r.position.set(a,e,0),r.updateMatrix(),this.imesh.setMatrixAt(i++,r.matrix),e+=this.wSize;a+=this.wSize}}initGeometry(){const e=new Ce;e.vertices.push(new a(0,0,0)),e.vertices.push(new a(this.wSize,0,0)),e.vertices.push(new a(0,this.wSize,0)),e.vertices.push(new a(this.wSize,this.wSize,0)),e.faces.push(new Pe(0,2,1)),e.faces.push(new Pe(2,3,1)),e.faceVertexUvs[0].push([new i(0,0),new i(0,1),new i(1,0)]),e.faceVertexUvs[0].push([new i(0,1),new i(1,1),new i(1,0)]),this.dx=this.wSize/2,this.dy=this.wSize/2,e.translate(-this.dx,-this.dy,0),this.bGeometry=e.toBufferGeometry()}initAnimAttributes(){const{randFloat:e,randFloatSpread:t}=Ie,s=new a,r=new Float32Array(3*this.icount);for(let a=0;a<r.length;a+=3)1===this.anim?s.set(t(10),e(50,100),e(20,50)).toArray(r,a):s.set(t(20),t(20),e(20,200)).toArray(r,a);this.bGeometry.setAttribute("offset",new Ge(r,3));const i=new Float32Array(3*this.icount),h=4*Math.PI;for(let a=0;a<i.length;a+=3)i[a]=t(h),i[a+1]=t(h),i[a+2]=t(h);this.bGeometry.setAttribute("rotation",new Ge(i,3))}initUV(){const e=this.nx/this.ny,t=this.texture.image.width/this.texture.image.height;e>t?this.uvScale.set(1/this.nx,t/e/this.ny):this.uvScale.set(e/t/this.nx,1/this.ny);const s=this.uvScale.x*this.nx,r=this.uvScale.y*this.ny,a=new i,h=new Float32Array(2*this.icount);for(let i=0;i<this.nx;i++)for(let e=0;e<this.ny;e++)a.set(this.uvScale.x*i+(1-s)/2,this.uvScale.y*e+(1-r)/2).toArray(h,2*(i*this.ny+e));this.bGeometry.setAttribute("uvOffset",new Ge(h,2))}setTexture(e){this.texture=e,this.material.map=e,this.initUV()}resize(){this.initPlane()}}const Cs={components:{Camera:Xe,Renderer:Ue,Scene:qe},props:{images:Array,events:{type:Object,default:()=>({wheel:!0,click:!0,keyup:!0})}},setup:()=>({loader:function(){const e={loader:new $,count:0,textures:[],loadProgress:0,loadTextures:function(s,r){e.count=s.length,e.textures.splice(0),e.loadProgress=0,Promise.all(s.map(t)).then(r)},dispose:function(){e.textures.forEach((e=>e.dispose()))}};return e;function t(t,s){return new Promise((r=>{e.loader.load(t.src,(t=>{e.loadProgress+=1/e.count,e.textures[s]=t,r(t)}))}))}}(),progress:0,targetProgress:0}),mounted(){this.three=this.$refs.renderer.three,this.images.length<2?console.error("This slider needs at least 2 images."):this.loader.loadTextures(this.images,this.init)},unmounted(){this.loader.dispose();const e=this.three.renderer.domElement;e.removeEventListener("click",this.onClick),e.removeEventListener("wheel",this.onWheel),document.removeEventListener("keyup",this.onKeyup)},methods:{init(){this.initScene(),ke.fromTo(this.plane1.uProgress,{value:-2},{value:0,duration:2.5,ease:Re.easeOut});const e=this.three.renderer.domElement;this.events.click&&e.addEventListener("click",this.onClick),this.events.wheel&&e.addEventListener("wheel",this.onWheel),this.events.keyup&&document.addEventListener("keyup",this.onKeyup),this.three.onBeforeRender(this.updateProgress),this.three.onAfterResize(this.onResize)},initScene(){const e=this.three.renderer,t=this.$refs.scene.scene;this.plane1=new zs({renderer:e,screen:this.three.size,size:10,anim:1,texture:this.loader.textures[0]}),this.plane2=new zs({renderer:e,screen:this.three.size,size:10,anim:2,texture:this.loader.textures[1]}),this.setPlanesProgress(0),this.planes=new ze,this.planes.add(this.plane1.o3d),this.planes.add(this.plane2.o3d),t.add(this.planes)},onResize(){this.plane1.resize(),this.plane2.resize()},onWheel(e){e.deltaY>0?this.setTargetProgress(this.targetProgress+.05):this.setTargetProgress(this.targetProgress-.05)},onClick(e){e.clientY<this.three.size.height/2?this.navPrevious():this.navNext()},onKeyup(e){37===e.keyCode||38===e.keyCode?this.navPrevious():39!==e.keyCode&&40!==e.keyCode||this.navNext()},navNext(){Number.isInteger(this.targetProgress)?this.setTargetProgress(this.targetProgress+1):this.setTargetProgress(Math.ceil(this.targetProgress))},navPrevious(){Number.isInteger(this.targetProgress)?this.setTargetProgress(this.targetProgress-1):this.setTargetProgress(Math.floor(this.targetProgress))},setTargetProgress(e){this.targetProgress=e,this.targetProgress<0&&(this.progress+=this.images.length,this.targetProgress+=this.images.length)},updateProgress(){const e=He(this.progress,this.targetProgress,.1),t=e-this.progress;if(0===t)return;const s=this.progress%1,r=e%1;if(t>0&&r<s||t<0&&s<r){const t=Math.floor(e)%this.images.length,s=(t+1)%this.images.length;this.plane1.setTexture(this.loader.textures[t]),this.plane2.setTexture(this.loader.textures[s])}this.progress=e,this.setPlanesProgress(this.progress%1)},setPlanesProgress(e){this.plane1.uProgress.value=e,this.plane2.uProgress.value=-1+e,this.plane1.material.opacity=1-e,this.plane2.material.opacity=e,this.plane1.o3d.position.z=e,this.plane2.o3d.position.z=e-1}}};Cs.render=function(e,t,s,r,i,a){const h=Le("Camera"),n=Le("Scene"),o=Le("Renderer");return Ee(),Te(o,{ref:"renderer",antialias:"",resize:""},{default:Be((()=>[Ae(h,{ref:"camera",position:{z:150}},null,512),Ae(n,{ref:"scene"},null,512)])),_:1},512)};const Ps={components:{Slider:Cs},data:()=>({images:[{src:"/assets/images/img1.jpg"},{src:"/assets/images/img2.jpg"},{src:"/assets/images/img3.jpg"},{src:"/assets/images/img4.jpg"},{src:"/assets/images/img5.jpg"}]}),mounted(){},methods:{}};Ps.render=function(e,t,s,r,i,a){const h=Le("Slider");return Ee(),Te(h,{images:i.images},null,8,["images"])};const Gs=je(Ps);Gs.use(Ms),Gs.mount("#app");
